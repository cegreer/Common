<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vizistata.Common</name>
    </assembly>
    <members>
        <member name="T:Vizistata.ReusableAttribute">
            <summary>
            Indicates that a type is reusable and can be promoted to a common class library or framework.  This class may not be inherited.
            </summary>
        </member>
        <member name="F:Vizistata.ReusableAttribute._approver">
            <summary>
            The name of the approver.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.ReusableAttribute._comments">
            <summary>
            Any comments about the reusability.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.ReusableAttribute._isReusable">
            <summary>
            <c>true</c> if the type is reusable; otherwise, <c>false</c>.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.ReusableAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ReusableAttribute"/> class.
            </summary>
            <param name="isReusable"><c>true</c> if the type is reusable and eligible for promotion; otherwise, <c>false</c>.</param>
        </member>
        <member name="P:Vizistata.ReusableAttribute.Approver">
            <summary>
            Gets or sets the name of the approver.
            </summary>
        </member>
        <member name="P:Vizistata.ReusableAttribute.Comments">
            <summary>
            Gets or sets the comments about the reusability.
            </summary>
        </member>
        <member name="P:Vizistata.ReusableAttribute.IsReusable">
            <summary>
            Gets a value indicating if the type is reusable.
            </summary>
        </member>
        <member name="T:Vizistata.RefactorAttribute">
            <summary>
            Indicates that the code needs to be refactored in some way.  This class may not be inherited.
            </summary>
        </member>
        <member name="F:Vizistata.RefactorAttribute._comments">
            <summary>
            Any comments that describe the need for, or type of, refactoring.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.RefactorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RefactorAttribute"/> class.
            </summary>
            <param name="comments">Any comments that describe the need for, or type of, refactoring.</param>
        </member>
        <member name="P:Vizistata.RefactorAttribute.Comments">
            <summary>
            Gets the comments that describe the need for, or type of, refactoring.
            </summary>
        </member>
        <member name="T:Vizistata.DisposableBase">
            <summary>
            Acts as a base class for object that have disposable resources.
            </summary>
        </member>
        <member name="F:Vizistata.DisposableBase._isDisposed">
            <summary>
            <c>true</c> if this instance has been disposed; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="M:Vizistata.DisposableBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisposableBase"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.DisposableBase.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:DisposableBase"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.DisposableBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Vizistata.DisposableBase.Dispose(System.Boolean)">
            <summary>
            Disposes any resources held by this instance.
            </summary>
            <param name="isDisposing"><c>true</c> if this method is called from <see cref="M:IDisposable.Dispose"/>; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Vizistata.DisposableBase.ReleaseManagedResources">
            <summary>
            When overriden in a derived class, releases any managed resources held by this instance.
            </summary>
        </member>
        <member name="M:Vizistata.DisposableBase.ReleaseUnmanagedResources">
            <summary>
            When overriden in a derived class, releases any unmanaged resources held by this instance.
            </summary>
        </member>
        <member name="M:Vizistata.DisposableBase.ThrowIfDisposed">
            <summary>
            Throws an <see cref="T:ObjectDisposedException"/> if this instance has been disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException"><see cref="P:IsDisposed"/> is <c>true</c>.</exception>
        </member>
        <member name="P:Vizistata.DisposableBase.IsDisposed">
            <summary>
            Gets a value indicating if this instance has been disposed.
            </summary>
        </member>
        <member name="T:Vizistata.EventObject">
            <summary>
            Represents an event object for <see cref="T:EventHandler"/> delegates.  This class may not be inherited.
            </summary>
        </member>
        <member name="T:Vizistata.EventBase">
            <summary>
            The base class for objects that represent events.
            </summary>
        </member>
        <member name="F:Vizistata.EventBase._ignoreSerializability">
            <summary>
            <c>true</c> if the all event handlers should be treated as non-serialized; otherwise, <c>false</c>.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.EventBase._nonSerializedHandlers">
            <summary>
            The collection of event handlers that cannot be serialized.
            </summary>
        </member>
        <member name="F:Vizistata.EventBase._serializedHandlers">
            <summary>
            The collection of event handlers that can be serialized.
            </summary>
        </member>
        <member name="M:Vizistata.EventBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EventBase"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.EventBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EventBase"/> class.
            </summary>
            <param name="ignoreSerializability"><c>true</c> to treat all event handlers as non-serialized; otherwise, <c>false</c>.  Setting this value to <c>true</c> will result in performance improvements, but all event handlers will be lost during serialization.</param>
        </member>
        <member name="M:Vizistata.EventBase.AddDelegate(System.Delegate)">
            <summary>
            Adds the delegate specified.
            </summary>
            <param name="value">The delegate to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.EventBase.RemoveDelegate(System.Delegate)">
            <summary>
            Removes the delegate specified.
            </summary>
            <param name="value">The delegate to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.EventBase.ShouldSerialize(System.Delegate)">
            <summary>
            Returns a value indicating if the delegate should be serialized.
            </summary>
            <param name="value">The delegate to check.</param>
            <returns><c>true</c> if the delegate can and should be serialized; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Vizistata.EventBase.EventHandler">
            <summary>
            Gets the event handler delegate for the event.
            </summary>
        </member>
        <member name="M:Vizistata.EventObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EventObject"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.EventObject.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EventObject"/> class.
            </summary>
            <param name="ignoreSerializable"><c>true</c> to treat all event handlers as non-serialized; otherwise, <c>false</c>.  Setting this value to <c>true</c> will result in performance improvements, but all event handlers will be lost during serialization.</param>
        </member>
        <member name="M:Vizistata.EventObject.AddHandler(System.EventHandler)">
            <summary>
            Adds an event handler to the delegate.
            </summary>
            <param name="value">The event handler delegate to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.EventObject.RaiseEvent(System.Object,System.EventArgs)">
            <summary>
            Raises the event.
            </summary>
            <param name="sender">The object sending the event.</param>
            <param name="e">Provides information about the event.</param>
        </member>
        <member name="M:Vizistata.EventObject.RemoveHandler(System.EventHandler)">
            <summary>
            Removes an event handler from the delegate.
            </summary>
            <param name="value">The event handler delegate to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference.</exception>
        </member>
        <member name="T:Vizistata.EventObject`1">
            <summary>
            Represents an event object for <see cref="T:EventHandler&lt;T&gt;"/> delegates.  This class may not be inherited.
            </summary>
            <typeparam name="T">The type of <see cref="T:EventArgs"/> object.</typeparam>
        </member>
        <member name="M:Vizistata.EventObject`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EventObject&lt;T&gt;"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.EventObject`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EventObject&lt;T&gt;"/> class.
            </summary>
            <param name="ignoreSerializable"><c>true</c> to treat all event handlers as non-serialized; otherwise, <c>false</c>.  Setting this value to <c>true</c> will result in performance improvements, but all event handlers will be lost during serialization.</param>
        </member>
        <member name="M:Vizistata.EventObject`1.AddHandler(System.EventHandler{`0})">
            <summary>
            Adds an event handler to the delegate.
            </summary>
            <param name="value">The event handler delegate to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.EventObject`1.RaiseEvent(System.Object,`0)">
            <summary>
            Raises the event.
            </summary>
            <param name="sender">The object sending the event.</param>
            <param name="e">Provides information about the event.</param>
        </member>
        <member name="M:Vizistata.EventObject`1.RemoveHandler(System.EventHandler{`0})">
            <summary>
            Removes an event handler from the delegate.
            </summary>
            <param name="value">The event handler delegate to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference.</exception>
        </member>
        <member name="T:Vizistata.Collections.ReadOnlyDictionary`2">
            <summary>
            Represents a read-only dictionary.
            </summary>
            <typeparam name="TKey">The type of object used as keys.</typeparam>
            <typeparam name="TValue">The type of object used as values.</typeparam>
        </member>
        <member name="F:Vizistata.Collections.ReadOnlyDictionary`2._innerDictionary">
            <summary>
            Contains the actual elements for the read-only dictionary.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:ReadOnlyDictionary&lt;TKey,TValue&gt;"/> class.
            </summary>
            <param name="dictionary">The dictionary to wrap.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Collections.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the dictionary contains a specific value.
            </summary>
            <param name="item">The object to locate in the dictionary.</param>
            <returns><c>true</c> if item is found in the dictionary; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Collections.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns><c>true</c> if the dictionary contains an element with the key; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Collections.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the dictionary to an <see cref="T:Array"/>, starting at a particular <see cref="T:Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:Array"/> that is the destination of the elements copied from dictionary.  The <see cref="T:Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
            -or- The number of elements in the source dictionary is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
        </member>
        <member name="M:Vizistata.Collections.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:IEnumerator&lt;T&gt;"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vizistata.Collections.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.  This parameter is passed uninitialized.</param>
            <returns><c>true</c> if this instance contains an element with the specified key; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
        </member>
        <member name="P:Vizistata.Collections.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get.</param>
            <returns>The element with the specified key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/> is not found.</exception>
        </member>
        <member name="P:Vizistata.Collections.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the dictionary.
            </summary>
        </member>
        <member name="P:Vizistata.Collections.ReadOnlyDictionary`2.InnerDictionary">
            <summary>
            Gets the inner dictionary.
            </summary>
        </member>
        <member name="P:Vizistata.Collections.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:ICollection&lt;T&gt;"/> containing the keys of the dictionary.
            </summary>
        </member>
        <member name="P:Vizistata.Collections.ReadOnlyDictionary`2.Values">
            <summary>
            Gets an <see cref="T:ICollection&lt;T&gt;"/> containing the values in the dictionary.
            </summary>
        </member>
        <member name="T:Vizistata.Diagnostics.TraceListenerConfigurationException">
            <summary>
            Represents an error that occurs because of a trace listener's configuration.
            </summary>
        </member>
        <member name="M:Vizistata.Diagnostics.TraceListenerConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TraceListenerConfigurationException"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.Diagnostics.TraceListenerConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TraceListenerConfigurationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Vizistata.Diagnostics.TraceListenerConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TraceListenerConfigurationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Contains additional information about the error.</param>
        </member>
        <member name="M:Vizistata.Diagnostics.TraceListenerConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TraceListenerConfigurationException"/> class.
            </summary>
            <param name="info">Contains information used to serialize/deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialization.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is a null reference.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Any errors occur during the deserialization process.</exception>
        </member>
        <member name="T:Vizistata.Reflection.ObjectExtensions">
            <summary>
            Provides reflection-based extension methods for the <see cref="T:Object"/> class.  This class may not be inherited.
            </summary>
        </member>
        <member name="M:Vizistata.Reflection.ObjectExtensions.GetFieldValue(System.Object,System.String)">
            <summary>
            Returns the value of the field specified.
            </summary>
            <param name="instance">The instance from which to get the field value.  For static fields, this should be the type.</param>
            <param name="name">The name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="name"/> is a null reference.</exception>
            <exception cref="T:System.MissingMemberException">The field specified cannot be found.</exception>
        </member>
        <member name="M:Vizistata.Reflection.ObjectExtensions.GetPropertyValue(System.Object,System.String)">
            <summary>
            Returns the value of the property specified.
            </summary>
            <param name="instance">The instance from which to get the property value.  For static properties, this should be the type.</param>
            <param name="name">The name of the property.</param>
            <returns>The value of the property.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="name"/> is a null reference.</exception>
            <exception cref="T:System.MissingMemberException">The property specified cannot be found.</exception>
            <exception cref="T:System.InvalidOperationException">The property specified is write-only.</exception>
        </member>
        <member name="M:Vizistata.Reflection.ObjectExtensions.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a method and returns the result.
            </summary>
            <param name="instance">The object or type from which to invoke the method.</param>
            <param name="name">The name of the method.</param>
            <param name="args">The array of arguments to supply to the method.</param>
            <returns>The instance created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.</exception>
            <exception cref="T:System.MissingMemberException">A method matching the types specified could not be found.</exception>
        </member>
        <member name="M:Vizistata.Reflection.ObjectExtensions.InvokeMethod(System.Object,System.String,System.Type[],System.Object[])">
            <summary>
            Invokes a method and returns the result.
            </summary>
            <param name="instance">The object or type from which to invoke the method.</param>
            <param name="name">The name of the method.</param>
            <param name="argTypes">The array of argument types expected.</param>
            <param name="args">The array of arguments to supply to the method.</param>
            <returns>The return result of the method.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">The length of <paramref name="args"/> does not match the length of <paramref name="argTypes"/>.</exception>
            <exception cref="T:System.MissingMemberException">A method matching the types specified could not be found.</exception>
        </member>
        <member name="M:Vizistata.Reflection.ObjectExtensions.SetFieldValue(System.Object,System.String,System.Object)">
            <summary>
            Sets a field to a specified value.
            </summary>
            <param name="instance">The instance on which to set the field.  For static fields, this should be the type.</param>
            <param name="name">The name of the field.</param>
            <param name="value">The value to which to set the field.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="name"/> is a null reference.</exception>
            <exception cref="T:System.MissingMemberException">The field specified cannot be found.</exception>
            <exception cref="T:System.InvalidOperationException">The field specified is read-only.</exception>
            <exception cref="T:System.InvalidCastException">The value specified does not match the type of the field.</exception>
        </member>
        <member name="M:Vizistata.Reflection.ObjectExtensions.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Sets a property to a specified value.
            </summary>
            <param name="instance">The instance on which to set the property.  For static properties, this should be the type.</param>
            <param name="name">The name of the field.</param>
            <param name="value">The value to which to set the field.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="name"/> is a null reference.</exception>
            <exception cref="T:System.MissingMemberException">The property specified cannot be found.</exception>
            <exception cref="T:System.InvalidOperationException">The property is read-only.</exception>
            <exception cref="T:System.InvalidCastException">The value specified does not match the type of the property.</exception>
        </member>
        <member name="T:Vizistata.Diagnostics.MessageQueueTraceListener">
            <summary>
            A trace listener that sends messages to a Microsoft Message Queue.
            </summary>
        </member>
        <member name="F:Vizistata.Diagnostics.MessageQueueTraceListener._currentLine">
            <summary>
            The current line that is being created, or a null reference.
            </summary>
        </member>
        <member name="F:Vizistata.Diagnostics.MessageQueueTraceListener._linesDoor">
            <summary>
            Controls write access to the <see cref="F:_lines"/> field.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Diagnostics.MessageQueueTraceListener._lines">
            <summary>
            The list of lines that have been created.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Diagnostics.MessageQueueTraceListener._messageQueue">
            <summary>
            The message queue to use.
            </summary>
        </member>
        <member name="F:Vizistata.Diagnostics.MessageQueueTraceListener._path">
            <summary>
            The path to the message queue.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.Diagnostics.MessageQueueTraceListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MessageQueueTraceListener"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.Diagnostics.MessageQueueTraceListener.#ctor(System.Messaging.MessageQueue)">
            <summary>
            Initializes a new instance of the <see cref="T:MessageQueueTraceListener"/> class.
            </summary>
            <param name="messageQueue">The message queue to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="messageQueue"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:MessageQueue.CanWrite"/> property is set to <c>false</c> for <paramref name="messageQueue"/>.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.MessageQueueTraceListener.#ctor(System.Messaging.MessageQueue,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MessageQueueTraceListener"/> class.
            </summary>
            <param name="messageQueue">The message queue to use.</param>
            <param name="name">The name of the trace listener.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="messageQueue"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:MessageQueue.CanWrite"/> property is set to <c>false</c> for <paramref name="messageQueue"/>.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.MessageQueueTraceListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MessageQueueTraceListener"/> class.
            </summary>
            <param name="path">The path to the queue.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is invalid.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.MessageQueueTraceListener.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MessageQueueTraceListener"/> class.
            </summary>
            <param name="path">The path to the queue.</param>
            <param name="name">The name of the trace listener.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is invalid.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.MessageQueueTraceListener.CreateBody">
            <summary>
            Creates the e-mail body.
            </summary>
            <returns>The value that represents the body of the e-mail.</returns>
        </member>
        <member name="M:Vizistata.Diagnostics.MessageQueueTraceListener.CreateLabel">
            <summary>
            Creates the e-mail subject line.
            </summary>
            <returns>The value that represents the subject line of the e-mail.</returns>
        </member>
        <member name="M:Vizistata.Diagnostics.MessageQueueTraceListener.Dispose(System.Boolean)">
            <summary>
            Disposes of any managed resources held by this instance.
            </summary>
            <param name="disposing"><c>true</c> if called from the <see cref="M:IDisposable.Dispose"/> method; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Vizistata.Diagnostics.MessageQueueTraceListener.EnsureMessageQueue">
            <summary>
            Ensures that the message queue object exists.
            </summary>
        </member>
        <member name="M:Vizistata.Diagnostics.MessageQueueTraceListener.Flush">
            <summary>
            Immediately sends any lines to the e-mail addresses in the recipient list.
            </summary>
        </member>
        <member name="M:Vizistata.Diagnostics.MessageQueueTraceListener.SendMessage">
            <summary>
            Attempts to send a message to a message queue and returns a value indicating if a message was actually created and sent.
            </summary>
            <returns><c>true</c> if a message was sent; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Diagnostics.MessageQueueTraceListener.Write(System.String,System.Boolean)">
            <summary>
            Writes a message.  A parameter determines whether the line is complete after the message is written.
            </summary>
            <param name="message">The message to write.</param>
            <param name="endOfLine"><c>true</c> if this message is the end of the current line; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Vizistata.Diagnostics.MessageQueueTraceListener.Write(System.String)">
            <summary>
            Writes a message.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Vizistata.Diagnostics.MessageQueueTraceListener.WriteLine(System.String)">
            <summary>
            Writes a message and ends with a new-line character.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="P:Vizistata.Diagnostics.MessageQueueTraceListener.Lines">
            <summary>
            Gets the enumerable collection of lines that have not yet been sent.
            </summary>
        </member>
        <member name="T:Vizistata.Collections.DuplicateKeyException">
            <summary>
            Represents errors that occur because a key has a duplicate.
            </summary>
        </member>
        <member name="M:Vizistata.Collections.DuplicateKeyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DuplicateKeyException"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.Collections.DuplicateKeyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DuplicateKeyException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Vizistata.Collections.DuplicateKeyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DuplicateKeyException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Contains additional information about the error.</param>
        </member>
        <member name="M:Vizistata.Collections.DuplicateKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DuplicateKeyException"/> class.
            </summary>
            <param name="info">Contains information used to serialize/deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialization.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is a null reference.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Any errors occur during the deserialization process.</exception>
        </member>
        <member name="T:Vizistata.Configuration.ConfigurationContext">
            <summary>
            Provides contextual information about the configuration of the current application or process.  This class may not be inherited.
            </summary>
        </member>
        <member name="F:Vizistata.Configuration.ConfigurationContext._appSettings">
            <summary>
            The cache for the appSettings section.
            </summary>
        </member>
        <member name="F:Vizistata.Configuration.ConfigurationContext._cacheInformation">
            <summary>
            <c>true</c> if information should be cached; otherwise, <c>false</c>.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Configuration.ConfigurationContext._connectionStrings">
            <summary>
            The cache for the connectionStrings section.
            </summary>
        </member>
        <member name="F:Vizistata.Configuration.ConfigurationContext._default">
            <summary>
            The default instance.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Configuration.ConfigurationContext._sectionMappingUnknownEvent">
            <summary>
            Represents the <see cref="E:SectionMappingUnknown"/> event.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Configuration.ConfigurationContext._sectionPaths">
            <summary>
            The collection of paths for the sections keyed by the type of the section.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Configuration.ConfigurationContext._sections">
            <summary>
            The cache for the configuration sections.
            </summary>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConfigurationContext"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ConfigurationContext"/> class.
            </summary>
            <param name="cacheInformation"><c>true</c> if information should be cached; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.AddPath``1(System.String)">
            <summary>
            Adds a path to the list of known paths for the configuration section type specified.
            </summary>
            <typeparam name="T">Specifies the type of the configuration section.</typeparam>
            <param name="path">The path of the configuration section.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is not a valid configuration path.
            -or- <typeparamref name="T"/> is already known.</exception>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.AddPath(System.Type,System.String)">
            <summary>
            Adds a path to the list of known paths for the configuration section type specified.
            </summary>
            <param name="type">The type of the configuration section.</param>
            <param name="path">The path of the configuration section.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is a null reference.
            -or- <paramref name="path"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> does not derive from <see cref="T:System.Configuration.ConfigurationSection"/>.
            -or- <paramref name="path"/> is not a valid configuration path.
            -or- <paramref name="type"/> is already known.</exception>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.AddSectionPath(Vizistata.Configuration.ConfigurationContext.ConfigurationSectionType,Vizistata.RelativePath)">
            <summary>
            Adds a section path to the list of known paths.
            </summary>
            <param name="type">The type of the configuration section.</param>
            <param name="path">The path to the configuration section.</param>
            <exception cref="T:System.ArgumentException">The type is already known.</exception>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.GetSection``1">
            <summary>
            Returns the known configuration section specified.
            </summary>
            <typeparam name="T">The type of configuration section to return.  If the configuration section type specified is not known, an exception will be thrown.</typeparam>
            <returns>The configuration section object found, or a null reference if it does not exist in the configuration file(s).</returns>
            <exception cref="T:System.InvalidOperationException">The configuration section is not known.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">A configuration file could not be loaded.</exception>
            <exception cref="T:System.InvalidCastException">The configuration section is mapped to a path that is incorrect in the configuration file(s).</exception>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.GetSection(System.Type)">
            <summary>
            Returns the known configuration section specified.
            </summary>
            <param name="type">The type of configuration section to return.  If the configuration section type specified is not known, an exception will be thrown.</param>
            <returns>The configuration section object found, or a null reference if it does not exist in the configuration file(s).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> does not derive from <see cref="T:ConfigurationSection"/>.
            -or- <paramref name="type"/> is abstract.</exception>
            <exception cref="T:System.InvalidOperationException">The configuration section is not known.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">A configuration file could not be loaded.</exception>
            <exception cref="T:System.InvalidCastException">The configuration section is mapped to a path that is incorrect in the configuration file(s).</exception>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.GetSection``1(System.String)">
            <summary>
            Returns the configuration section specified.
            </summary>
            <typeparam name="T">The type of configuration section to return.</typeparam>
            <param name="path">The path to the configuration section.</param>
            <returns>The configuration section object found, or a null reference if it does not exist in the configuration file(s).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is invalid.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">A configuration file could not be loaded.</exception>
            <exception cref="T:System.InvalidCastException">The configuration section is mapped to a path that is incorrect in the configuration file(s).</exception>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.GetSection(System.String)">
            <summary>
            Returns the configuration section specified.
            </summary>
            <param name="path">The path to the configuration section.</param>
            <returns>The configuration section object found, or a null reference if it does not exist in the configuration file(s).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is invalid.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">A configuration file could not be loaded.</exception>
            <exception cref="T:System.InvalidCastException">The configuration section is mapped to a path that is incorrect in the configuration file(s).</exception>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.IsPathKnown``1">
            <summary>
            Returns a value indicating if the path is known for the configuration section type specified.
            </summary>
            <typeparam name="T">The type of configuration section.</typeparam>
            <returns><c>true</c> if the configuration section type's path is known; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.IsPathKnown(System.Type)">
            <summary>
            Returns a value indicating if the path is known for the configuration section type specified.
            </summary>
            <param name="type">The type of configuration section.</param>
            <returns><c>true</c> if the configuration section type's path is known; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.IsPathKnown(Vizistata.Configuration.ConfigurationContext.ConfigurationSectionType)">
            <summary>
            Returns a value indicating if the path is known for the configuration section type specified.
            </summary>
            <param name="sectionType">The type of configuration section.</param>
            <returns><c>true</c> if the configuration section type's path is known; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.OnSectionMappingUnknown(Vizistata.Configuration.SectionMappingEventArgs)">
            <summary>
            Raises the <see cref="E:SectionMappingUnknown"/> event.
            </summary>
            <param name="e">Provides information about the event.</param>
        </member>
        <member name="P:Vizistata.Configuration.ConfigurationContext.AppSettings">
            <summary>
            Gets the key-value pairs for the appSettings section.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">A <see cref="T:NameValueCollection"/> object could not be created with the application settings data.</exception>
        </member>
        <member name="P:Vizistata.Configuration.ConfigurationContext.ConnectionStrings">
            <summary>
            Gets the connection strings in the connectionStrings section.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">A <see cref="T:ConnectionStringSettingsCollection"/> object could not be retrieved.</exception>
        </member>
        <member name="P:Vizistata.Configuration.ConfigurationContext.Default">
            <summary>
            Gets the default instance for the <see cref="T:ConfigurationContext"/> class.
            </summary>
        </member>
        <member name="E:Vizistata.Configuration.ConfigurationContext.SectionMappingUnknown">
            <summary>
            Occurs when a section mapping is unknown.
            </summary>
            <exception cref="T:System.ArgumentNullException">The event handler delegate specified is a null reference.</exception>
        </member>
        <member name="T:Vizistata.Configuration.ConfigurationContext.ConfigurationSectionType">
            <summary>
            Represents a specific configuration section type.  This class may not be inherited.
            </summary>
        </member>
        <member name="F:Vizistata.Configuration.ConfigurationContext.ConfigurationSectionType._actualType">
            <summary>
            The actual type represented.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.ConfigurationSectionType.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ConfigurationSectionType"/> class.
            </summary>
            <param name="type">The configuration section type.</param>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.ConfigurationSectionType.Create(System.Type)">
            <summary>
            Creates and returns an instance of the <see cref="T:ConfigurationSectionType"/> class.
            </summary>
            <param name="type">The configuration section type.</param>
            <returns>A reference to the <see cref="T:ConfigurationSectionType"/> created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> does not derive from <see cref="T:ConfigurationSection"/>.
            -or- <paramref name="type"/> is abstract.</exception>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.ConfigurationSectionType.Create(System.Type,System.Boolean)">
            <summary>
            Creates and returns an instance of the <see cref="T:ConfigurationSectionType"/> class.
            </summary>
            <param name="type">The configuration section type.</param>
            <param name="suppressErrors"><c>true</c> if a null reference should be returned instead of throwing exceptions if <paramref name="type"/> is invalid; otherwise, <c>false</c>.</param>
            <returns>A reference to the <see cref="T:ConfigurationSectionType"/> created, or a null reference if <paramref name="suppressErrors"/> is <c>true</c> and <paramref name="type"/> is invalid.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="suppressErrors"/> is <c>false</c>, and <paramref name="type"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="suppressErrors"/> is <c>false</c>, and <paramref name="type"/> does not derive from <see cref="T:ConfigurationSection"/>.
            -or- <paramref name="suppressErrors"/> is <c>false</c>, and <paramref name="type"/> is abstract.</exception>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.ConfigurationSectionType.Equals(System.Object)">
            <summary>
            Returns a value indicating if this instance is equal to the object specified.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if the object specified is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.ConfigurationSectionType.Equals(Vizistata.Configuration.ConfigurationContext.ConfigurationSectionType)">
            <summary>
            Returns a value indicating if this instance is equal to the object specified.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if the object specified is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.ConfigurationSectionType.Equals(System.Type)">
            <summary>
            Returns a value indicating if this instance is equal to the object specified.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if the object specified is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.ConfigurationSectionType.GetHashCode">
            <summary>
            Returns a value that serves as a hashed value for this instance.
            </summary>
            <returns>The hash code value for this instance.</returns>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.ConfigurationSectionType.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.ConfigurationSectionType.op_Implicit(Vizistata.Configuration.ConfigurationContext.ConfigurationSectionType)~System.Type">
            <summary>
            Implicitly converts a <see cref="T:ConfigurationSectionType"/> object to a <see cref="T:Type"/> object.
            </summary>
            <param name="instance">The object to convert.</param>
            <returns>A reference to the <see cref="T:Type"/> created.</returns>
        </member>
        <member name="M:Vizistata.Configuration.ConfigurationContext.ConfigurationSectionType.op_Explicit(System.Type)~Vizistata.Configuration.ConfigurationContext.ConfigurationSectionType">
            <summary>
            Implicitly converts a <see cref="T:Type"/> object to a <see cref="T:ConfigurationSectionType"/> object.
            </summary>
            <param name="type">The object to convert.</param>
            <returns>A reference to the <see cref="T:ConfigurationSectionType"/> created.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="type"/> is not convertible to <see cref="T:ConfigurationSectionType"/>.</exception>
        </member>
        <member name="T:Vizistata.GeoCoordinate">
            <summary>
            Represents a geological set of coordinates.  Instances of this struct are immutable.
            </summary>
        </member>
        <member name="F:Vizistata.GeoCoordinate.EarthRadiusInKilometers">
            <summary>
            The value of the radius of Earth in kilometers = 6371.1.
            </summary>
        </member>
        <member name="F:Vizistata.GeoCoordinate.EarthRadiusInMiles">
            <summary>
            The value of the radius of Earth in miles = 3963.1676.
            </summary>
        </member>
        <member name="F:Vizistata.GeoCoordinate.GeneralFormat">
            <summary>
            The general or default format string = "g".
            </summary>
        </member>
        <member name="F:Vizistata.GeoCoordinate.SetFormat">
            <summary>
            The format string that denotes a set (i.e.  "{ lat, long }") = "s".
            </summary>
        </member>
        <member name="F:Vizistata.GeoCoordinate._latitude">
            <summary>
            The latitude of this GeoCoordinate.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.GeoCoordinate._longitude">
            <summary>
            The longitude of this GeoCoordinate.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.GeoCoordinate.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GeoCoordinate"/> class.
            </summary>
            <param name="latitude">The latitude in degrees.</param>
            <param name="longitude">The longitude in degrees.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="latitude"/> is less than -90.
            -or <paramref name="latitude"/> is greater than 90.
            -or <paramref name="longitude"/> is less than -180.
            -or <paramref name="longitude"/> is greater than 180.</exception>
        </member>
        <member name="M:Vizistata.GeoCoordinate.ConvertDegreesToRadians(System.Double)">
            <summary>
            Returns the radians from the specified degrees.
            </summary>
            <param name="degrees">The degree value to convert into radians.</param>
            <returns>The radians value from the specified degrees.</returns>
        </member>
        <member name="M:Vizistata.GeoCoordinate.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Object"/> is equal to the current <see cref="T:GeoCoordinate"/>.
            </summary>
            <param name="obj">The <see cref="T:Object"/> to compare with the current <see cref="T:GeoCoordinate"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Object"/> is equal to the current <see cref="T:GeoCoordinate"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.GeoCoordinate.Equals(Vizistata.GeoCoordinate)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.GeoCoordinate.GetDistanceFrom(Vizistata.GeoCoordinate,System.Double)">
            <summary>
            Returns the distance from the <see cref="T:GeoCoordinate"/> specified.
            </summary>
            <param name="other">The other <see cref="T:GeoCoordinate"/> to use in calculating the distance.</param>
            <param name="earthRadius">The <see cref="T:Double"/> that represents the radius of earth in a measure such as kilometers or miles.</param>
            <returns>The distance in the measure implied by <paramref name="earthRadius"/> between the two <see cref="T:GeoCoordinate"/> instances.</returns>
        </member>
        <member name="M:Vizistata.GeoCoordinate.GetDistanceInKilometersFrom(Vizistata.GeoCoordinate)">
            <summary>
            Returns the distance in kilometers from the <see cref="T:GeoCoordinate"/> specified.
            </summary>
            <param name="other">The other <see cref="T:GeoCoordinate"/> to use in calculating the distance.</param>
            <returns>The distance in kilometers between the two <see cref="T:GeoCoordinate"/> instances.</returns>
        </member>
        <member name="M:Vizistata.GeoCoordinate.GetDistanceInMilesFrom(Vizistata.GeoCoordinate)">
            <summary>   
            Returns the distance in miles from the <see cref="T:GeoCoordinate"/> specified.
            </summary>
            <param name="other">The other <see cref="T:GeoCoordinate"/> to use in calculating the distance.</param>
            <returns>The distance in miles between the two <see cref="T:GeoCoordinate"/> instances.</returns>
        </member>
        <member name="M:Vizistata.GeoCoordinate.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:Object.GetHashCode"/> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:GeoCoordinate"/>.</returns>
        </member>
        <member name="M:Vizistata.GeoCoordinate.IsEastOf(Vizistata.GeoCoordinate)">
            <summary>
            Returns a value indicating if this instance is east of the <see cref="T:GeoCoordinate"/> specified.
            </summary>
            <param name="other">The <see cref="T:GeoCoordinate"/> against which to compare this instance.</param>
            <returns><c>true</c> if this instance is east of the <paramref name="other"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.GeoCoordinate.IsNorthOf(Vizistata.GeoCoordinate)">
            <summary>
            Returns a value indicating if this instance is north of the <see cref="T:GeoCoordinate"/> specified.
            </summary>
            <param name="other">The <see cref="T:GeoCoordinate"/> against which to compare this instance.</param>
            <returns><c>true</c> if this instance is north of the <paramref name="other"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.GeoCoordinate.IsSouthOf(Vizistata.GeoCoordinate)">
            <summary>
            Returns a value indicating if this instance is south of the <see cref="T:GeoCoordinate"/> specified.
            </summary>
            <param name="other">The <see cref="T:GeoCoordinate"/> against which to compare this instance.</param>
            <returns><c>true</c> if this instance is south of the <paramref name="other"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.GeoCoordinate.IsWestOf(Vizistata.GeoCoordinate)">
            <summary>
            Returns a value indicating if this instance is west of the <see cref="T:GeoCoordinate"/> specified.
            </summary>
            <param name="other">The <see cref="T:GeoCoordinate"/> against which to compare this instance.</param>
            <returns><c>true</c> if this instance is west of the <paramref name="other"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.GeoCoordinate.ToString">
            <summary>
            Returns a <see cref="T:String"/> that represents the current <see cref="T:GeoCoordinate"/>.
            </summary>
            <returns>A <see cref="T:String"/> that represents the current <see cref="T:GeoCoordinate"/>.</returns>
        </member>
        <member name="M:Vizistata.GeoCoordinate.ToString(System.String)">
            <summary>
            Returns a <see cref="T:String"/> that represents the current <see cref="T:GeoCoordinate"/>.
            </summary>
            <param name="format">The format string to use.</param>
            <returns>A <see cref="T:String"/> that represents the current <see cref="T:GeoCoordinate"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="format"/> is not a valid format.</exception>
        </member>
        <member name="M:Vizistata.GeoCoordinate.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:String"/> that represents the current <see cref="T:GeoCoordinate"/>.
            </summary>
            <param name="provider">Provides formatting information.</param>
            <returns>A <see cref="T:String"/> that represents the current <see cref="T:GeoCoordinate"/>.</returns>
        </member>
        <member name="M:Vizistata.GeoCoordinate.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:String"/> that represents the current <see cref="T:GeoCoordinate"/>.
            </summary>
            <param name="format">The format string to use.</param>
            <param name="formatProvider">Provides formatting information.</param>
            <returns>A <see cref="T:String"/> that represents the current <see cref="T:GeoCoordinate"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="format"/> is not a valid format.</exception>
        </member>
        <member name="M:Vizistata.GeoCoordinate.op_Equality(Vizistata.GeoCoordinate,Vizistata.GeoCoordinate)">
            <summary>
            Returns a value indicating if the two instances are equal.
            </summary>
            <param name="objA">The first object to compare.</param>
            <param name="objB">The second object to compare.</param>
            <returns><c>true</c> if the two objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.GeoCoordinate.op_Inequality(Vizistata.GeoCoordinate,Vizistata.GeoCoordinate)">
            <summary>
            Returns a value indicating if the two instances are not equal.
            </summary>
            <param name="objA">The first object to compare.</param>
            <param name="objB">The second object to compare.</param>
            <returns><c>true</c> if the two objects are not equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Vizistata.GeoCoordinate.Latitude">
            <summary>
            Gets the latitude in degrees for the coordinate.  Positive values are east, and negative values are west.
            </summary>
        </member>
        <member name="P:Vizistata.GeoCoordinate.Longitude">
            <summary>
            Gets the longitude in degrees for the coordinate.  Positive values are north, and negative values are south.
            </summary>
        </member>
        <member name="T:Vizistata.Collections.PagedCollection`1">
            <summary>
            A read-only collection that represents a page of results.
            </summary>
            <typeparam name="T">The type of element in the collection.</typeparam>
        </member>
        <member name="F:Vizistata.Collections.PagedCollection`1._totalCount">
            <summary>
            The total number of items.
            </summary>
        </member>
        <member name="M:Vizistata.Collections.PagedCollection`1.#ctor(System.Collections.Generic.IList{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PagedCollection&lt;T&gt;"/> class.
            </summary>
            <param name="list">The list to wrap.</param>
            <param name="totalCount">The total items available including the items in this instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="totalCount"/> is less than 0.
            -or- <paramref name="totalCount"/> is less than the number of elements in <paramref name="list"/>.</exception>
        </member>
        <member name="P:Vizistata.Collections.PagedCollection`1.TotalCount">
            <summary>
            Gets the total number of items available including the items in this instance.
            </summary>
        </member>
        <member name="T:Vizistata.Data.DataRecordExtensions">
            <summary>
            Provides extension methods for the <see cref="T:IDataRecord"/> interface.  This class may not be inherited.
            </summary>
        </member>
        <member name="M:Vizistata.Data.DataRecordExtensions.Field``1(System.Data.IDataRecord,System.String)">
            <summary>
            Provides strongly-typed access to each of the values in the specified data record.  This method supports nullable types.
            </summary>
            <typeparam name="T">Specifies the return type of the column.</typeparam>
            <param name="dataRecord">The input data record for which a value should be retrieved.</param>
            <param name="name">The name of the value to return.</param>
            <returns>The value specified by <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataRecord"/> is a null reference.
            -or- <paramref name="name"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">The value specified is not of type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecordExtensions.Field``1(System.Data.IDataRecord,System.Int32)">
            <summary>
            Provides strongly-typed access to each of the values in the specified data record.  This method supports nullable types.
            </summary>
            <typeparam name="T">Specifies the return type of the column.</typeparam>
            <param name="dataRecord">The input data record for which a value should be retrieved.</param>
            <param name="index">The 0-based index of the value to return.</param>
            <returns>The value specified by <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataRecord"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.
            -or- <paramref name="index"/> is greater than or equal to the <see cref="P:IDataRecord.FieldCount"/> property of <paramref name="dataRecord"/>.</exception>
            <exception cref="T:System.InvalidCastException">The value specified is not of type <typeparamref name="T"/>.</exception>
        </member>
        <member name="T:Vizistata.Data.DataRecordExtensions.DataRecordConverter`1">
            <summary>
            Converts data record values to a specific type.  Nullable types are supported.  This class may not be inherited.
            </summary>
            <typeparam name="T">The type of value to which to convert the objects provided to instances of this class.</typeparam>
        </member>
        <member name="F:Vizistata.Data.DataRecordExtensions.DataRecordConverter`1._converter">
            <summary>
            Converts values for this instance.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.Data.DataRecordExtensions.DataRecordConverter`1.#ctor">
            <summary>
            Hides the default constructor for the <see cref="T:DataRecordConverter&lt;T&gt;"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.Data.DataRecordExtensions.DataRecordConverter`1.Convert(System.Object)">
            <summary>
            Converts the value specified to a specific type.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/> cannot be converted to the type specified by <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecordExtensions.DataRecordConverter`1.ConvertFromReferenceTypeValue(System.Object)">
            <summary>
            Converts a value to a reference type.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/> cannot be converted to the type specified by <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecordExtensions.DataRecordConverter`1.ConvertFromValueTypeValue(System.Object)">
            <summary>
            Converts a value to a value type.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/> cannot be converted to the type specified by <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecordExtensions.DataRecordConverter`1.CreateNullableValueType``1(System.Object)">
            <summary>
            Creates a nullable value.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/> cannot be converted to the type specified by <typeparamref name="T"/>.</exception>
        </member>
        <member name="P:Vizistata.Data.DataRecordExtensions.DataRecordConverter`1.Instance">
            <summary>
            Gets the sole instance of the <see cref="T:MyClass"/> class.
            </summary>
        </member>
        <member name="T:Vizistata.Data.DataRecordExtensions.DataRecordConverter`1.Nested">
            <summary>
            This class is used to make the pattern fully lazy.  This class may not be inherited.
            </summary>
        </member>
        <member name="F:Vizistata.Data.DataRecordExtensions.DataRecordConverter`1.Nested.Instance">
            <summary>
            The sole use of the Nested class is to provide the lazy, thread-safe instance of the <see cref="T:MyClass"/> object.
            </summary>
        </member>
        <member name="M:Vizistata.Data.DataRecordExtensions.DataRecordConverter`1.Nested.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nested"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.Data.DataRecordExtensions.DataRecordConverter`1.Nested.#cctor">
            <summary>
            Required in order to mark the type with 'beforefieldinit'.
            </summary>
        </member>
        <member name="T:Vizistata.Pair`2">
            <summary>
            Represents a strongly-typed pair of values.
            </summary>
            <typeparam name="TFirst">The type of the first object.</typeparam>
            <typeparam name="TSecond">The type of the second object.</typeparam>
        </member>
        <member name="F:Vizistata.Pair`2._first">
            <summary>
            The first object.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Pair`2._second">
            <summary>
            The second object.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.Pair`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vizistata.Pair`2"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Vizistata.Pair`2"/> class.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
        </member>
        <member name="P:Vizistata.Pair`2.First">
            <summary>
            Gets the first object.
            </summary>
        </member>
        <member name="P:Vizistata.Pair`2.Second">
            <summary>
            Gets the second object.
            </summary>
        </member>
        <member name="T:Vizistata.Pair`1">
            <summary>
            Represents a strongly-typed pair of values.
            </summary>
            <typeparam name="T">The type of objects contained.</typeparam>
        </member>
        <member name="F:Vizistata.Pair`1._first">
            <summary>
            The first object.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Pair`1._second">
            <summary>
            The second object.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.Pair`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vizistata.Pair`1"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.Pair`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Vizistata.Pair`1"/> class.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
        </member>
        <member name="P:Vizistata.Pair`1.First">
            <summary>
            Gets the first object.
            </summary>
        </member>
        <member name="P:Vizistata.Pair`1.Second">
            <summary>
            Gets the second object.
            </summary>
        </member>
        <member name="T:Vizistata.Collections.NonNullCollection`1">
            <summary>
            A strongly-typed collection of objects which doesn't allow nulls.  This class may not be inherited.
            </summary>
        </member>
        <member name="M:Vizistata.Collections.NonNullCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NonNullCollection"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.Collections.NonNullCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NonNullCollection"/> class.
            </summary>
            <param name="list">The list that is wrapped by the new collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="list"/> contains a null reference.</exception>
        </member>
        <member name="M:Vizistata.Collections.NonNullCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:Collection`1"/> at the specified index.
            </summary>
            <param name="index">The 0-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.
            -or- <paramref name="index"/> is greater than <see cref="P:Collection`1.Count"/>.</exception>
        </member>
        <member name="M:Vizistata.Collections.NonNullCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The 0-based index of the item which should be set.</param>
            <param name="item">The object to set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.
            -or- <paramref name="index"/> is greater than <see cref="P:Collection`1.Count"/>.</exception>
        </member>
        <member name="T:Vizistata.Linq.EnumerableExtensions">
            <summary>
            Provides extensions for the <see cref="T:IEnumerable&lt;T&gt;"/> interface.  This class may not be inherited.
            </summary>
        </member>
        <member name="M:Vizistata.Linq.EnumerableExtensions.ToArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates an array from an <see cref="T:IEnumerable&lt;T&gt;"/>.
            </summary>
            <typeparam name="TSource">The type of element in the source.</typeparam>
            <typeparam name="TResult">The type of element in the array created.</typeparam>
            <param name="instance">The enumerable collection to convert to an array.</param>
            <param name="selector">The projection function to invoke to convert the elements in the collection.</param>
            <returns>The array of objects created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="selector"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Linq.EnumerableExtensions.ToCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a <see cref="T:Collection&lt;T&gt;"/> from an <see cref="T:IEnumerable&lt;T&gt;"/>.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="instance">The object on which to invoke the method.</param>
            <returns>A reference to the collection created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Linq.EnumerableExtensions.ToReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a <see cref="T:ReadOnlyCollection&lt;Tgt;"/> from the enumerable collection.
            </summary>
            <typeparam name="T">The type of element in the collection.</typeparam>
            <param name="instance">The enumerable collection from which to create the <see cref="T:ReadOnlyCollection&lt;Tgt;"/>.</param>
            <returns>A reference to the <see cref="T:ReadOnlyCollection&lt;Tgt;"/> created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.</exception>
        </member>
        <member name="T:Vizistata.DomainName">
            <summary>
            Represents a domain name in DNS.  This class may not be inherited.  Instances of this class are immutable.
            </summary>
            <remarks>For business rules regarding this class, see the Wikipedia article here: http://en.wikipedia.org/wiki/Domain_name. </remarks>
        </member>
        <member name="F:Vizistata.DomainName._firstLevelLabel">
            <summary>
            The first-level domain label.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.DomainName._secondLevelLabel">
            <summary>
            The second-level domain label.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.DomainName._subDomainLabels">
            <summary>
            The sub-domain labels.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.DomainName.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:DomainName"/> class.
            </summary>
            <param name="firstLevelLabel">The first-level label.  For example, in the domain name "www.example.com", the first-level label is "com".</param>
            <param name="secondLevelLabel">The second-level label.  For example, in the domain name "www.example.com", the second-level label is "example".</param>
            <param name="subDomainLabels">The sub-domain labels.  For example, in the domain name "www.example.com", an array with the value "www" would be returned.  Also, in the domain name "somewhere.else.example.com", an ordered array with the values "else" and "somewhere" would be returned.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="firstLevelLabel"/> is a null reference.
            -or- <paramref name="secondLevelLabel"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="firstLevelLabel"/> is empty.
            -or- <paramref name="firstLevelLabel"/> contains characters not defined by <see cref="M:GetValidDomainLabelCharacters"/>.
            -or- <paramref name="secondLevelLabel"/> is empty.
            -or- <paramref name="secondLevelLabel"/> contains characters not defined by <see cref="M:GetValidDomainLabelCharacters"/>.
            -or- <paramref name="subDomainLabels"/> contains an element that is a null reference.
            -or- <paramref name="subDomainLabels"/> contains an element that is empty.
            -or- <paramref name="subDomainLabels"/> contains an element that contains characters not defined by <see cref="M:GetValidDomainLabelCharacters"/>.</exception>
            <exception cref="T:System.FormatException">The length of the domain name would exceed 253 characters.</exception>
        </member>
        <member name="M:Vizistata.DomainName.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:DomainName"/> class.
            </summary>
            <param name="labels">The domain labels.</param>
        </member>
        <member name="M:Vizistata.DomainName.AreEqual(Vizistata.DomainName,Vizistata.DomainName)">
            <summary>
            Returns a value indicating if the two objects specified are equal.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the two objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.DomainName.AreEqual(Vizistata.DomainName,System.String)">
            <summary>
            Returns a value indicating if the two objects specified are equal.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the two objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.DomainName.Equals(System.Object)">
            <summary>
            Returns a value indicating if the object specified is equal to this instance.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if the object specified is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.DomainName.Equals(Vizistata.DomainName)">
            <summary>
            Returns a value indicating if the object specified is equal to this instance.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if the object specified is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.DomainName.Equals(System.String)">
            <summary>
            Returns a value indicating if the object specified is equal to this instance.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if the object specified is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.DomainName.GetHashCode">
            <summary>
            Returns a value that can serve as a hash code for this instance.
            </summary>
            <returns>The value that can serve as a hash code for this instance.</returns>
        </member>
        <member name="M:Vizistata.DomainName.GetValidDomainLabelCharacters">
            <summary>
            Returns the array of valid characters for a domain label.
            </summary>
            <returns>The array of valid characters for a domain label.</returns>
        </member>
        <member name="M:Vizistata.DomainName.Parse(System.String)">
            <summary>
            Parses the string specified and returns an instance of the <see cref="T:DomainName"/> class.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>A reference to the <see cref="T:DomainName"/> created from <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference.</exception>
            <exception cref="T:System.FormatException"><paramref name="value"/> does not represent a valid <see cref="T:DomainName"/> object.</exception>
        </member>
        <member name="M:Vizistata.DomainName.Parse(System.String,System.Boolean)">
            <summary>
            Parses the string specified and returns an instance of the <see cref="T:DomainName"/> class.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="throwOnError"><c>true</c> to throw an exception if <paramref name="value"/> is invalid; otherwise, <c>false</c>.</param>
            <returns>A reference to the <see cref="T:DomainName"/> created from <paramref name="value"/>.
            -or- A null reference if <paramref name="value"/> is invalid and <paramref name="throwOnError"/> is <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference and <paramref name="throwOnError"/> is <c>true</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="value"/> does not represent a valid <see cref="T:DomainName"/> object and <paramref name="throwOnError"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Vizistata.DomainName.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:Vizistata.DomainName.TryParse(System.String,Vizistata.DomainName@)">
            <summary>
            Attempts to parse the string specified and returns a value indicating if the operation was successful.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When the method returns, this will contain the <see cref="T:DomainName"/> created, or a null reference if the method returns <c>false</c>.</param>
            <returns><c>true</c> if <paramref name="value"/> was parsed successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.DomainName.op_Equality(Vizistata.DomainName,Vizistata.DomainName)">
            <summary>
            Returns a value indicating if the two objects specified are equal.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the two objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.DomainName.op_Equality(Vizistata.DomainName,System.String)">
            <summary>
            Returns a value indicating if the two objects specified are equal.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the two objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.DomainName.op_Equality(System.String,Vizistata.DomainName)">
            <summary>
            Returns a value indicating if the two objects specified are equal.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the two objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.DomainName.op_Inequality(Vizistata.DomainName,Vizistata.DomainName)">
            <summary>
            Returns a value indicating if the two objects specified are not equal.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the two objects not are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.DomainName.op_Inequality(Vizistata.DomainName,System.String)">
            <summary>
            Returns a value indicating if the two objects specified are not equal.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the two objects not are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.DomainName.op_Inequality(System.String,Vizistata.DomainName)">
            <summary>
            Returns a value indicating if the two objects specified are not equal.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the two objects not are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.DomainName.op_Implicit(Vizistata.DomainName)~System.String">
            <summary>
            Implicitly converts the <see cref="T:DomainName"/> specified to an instance of the <see cref="T:String"/> class.
            </summary>
            <param name="instance">The object to convert.</param>
            <returns>The <see cref="T:String"/> object created, or a null reference if <paramref name="instance"/> is a null reference.</returns>
        </member>
        <member name="M:Vizistata.DomainName.op_Explicit(System.String)~Vizistata.DomainName">
            <summary>
            Explicitly converts the <see cref="T:String"/> specified to an instance of the <see cref="T:DomainName"/> class.
            </summary>
            <param name="instance">The object to convert.</param>
            <returns>The <see cref="T:DomainName"/> object created, or a null reference if <paramref name="instance"/> is a null reference.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="instance"/> is not valid for the <see cref="T:DomainName"/> class.</exception>
        </member>
        <member name="P:Vizistata.DomainName.AllLabels">
            <summary>
            Gets the enumerable collection of all labels in the domain name, starting with the top-level.
            </summary>
        </member>
        <member name="P:Vizistata.DomainName.FirstLevelLabel">
            <summary>
            Gets the first-level domain label.  For example, in the domain name "www.example.com", the first-level label is "com".
            </summary>
        </member>
        <member name="P:Vizistata.DomainName.SecondLevelLabel">
            <summary>
            Gets the second level domain label.  For example, in the domain name "www.example.com", the second-level label is "example".
            </summary>
        </member>
        <member name="P:Vizistata.DomainName.SubDomainLabels">
            <summary>
            Gets the sub-domain labels.  For example, in the domain name "www.example.com", an array with the value "www" would be returned.  Also, in the domain name "somewhere.else.example.com", an ordered array with the values "else" and "somewhere" would be returned.
            </summary>
        </member>
        <member name="T:Vizistata.Configuration.SectionMappingEventArgs">
            <summary>
            Provides information about the mapping for a configuration section.
            </summary>
        </member>
        <member name="F:Vizistata.Configuration.SectionMappingEventArgs._path">
            <summary>
            The path to which the configuration section maps.
            </summary>
        </member>
        <member name="F:Vizistata.Configuration.SectionMappingEventArgs._configurationSectionType">
            <summary>
            The type of configuration section.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.Configuration.SectionMappingEventArgs.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SectionMappingEventArgs"/> class.
            </summary>
            <param name="configurationSectionType">The type of configuration section.</param>
        </member>
        <member name="P:Vizistata.Configuration.SectionMappingEventArgs.ConfigurationSectionType">
            <summary>
            Gets the type of configuration section.
            </summary>
        </member>
        <member name="P:Vizistata.Configuration.SectionMappingEventArgs.Path">
            <summary>
            Gets or sets the path to which the configuration section maps.
            </summary>
        </member>
        <member name="T:Vizistata.ArrayExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Array"/> class.  This class may not be inherited.
            </summary>
        </member>
        <member name="M:Vizistata.ArrayExtensions.GetElementOrDefaultAt``1(``0[],System.Int32)">
            <summary>
            Returns the element at the specified index.  If the index is out of the array's bound, the default value will be returned.
            </summary>
            <typeparam name="T">The type of element in the array.</typeparam>
            <param name="instance">The instance on which to call the method.</param>
            <param name="index">The 0-based index of the element in the array.</param>
            <returns>The element at the index specified. -or- The default value if <typeparamref name="T"/> if <paramref name="index"/> is out of bounds for the array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.</exception>
        </member>
        <member name="T:Vizistata.StreamExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Stream"/> class.  This class may not be inherited.
            </summary>
        </member>
        <member name="M:Vizistata.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies the contents of a stream starting at the current position to another stream.
            </summary>
            <param name="instance">The instance from which to copy the contents.</param>
            <param name="stream">The stream to which to copy the contents.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="stream"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> is not writeable.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="instance"/> is not readable.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="instance"/> has been disposed.
            -or- <paramref name="stream"/> has been disposed.</exception>
            <remarks>This method already exists in .NET 4.0.</remarks>
        </member>
        <member name="M:Vizistata.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies the contents of a stream starting at the current position to another stream.
            </summary>
            <param name="instance">The instance from which to copy the contents.</param>
            <param name="stream">The stream to which to copy the contents.</param>
            <param name="bufferSize">The size of the buffer to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="stream"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> is less than 1.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> is not writeable.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="instance"/> is not readable.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="instance"/> has been disposed.
            -or- <paramref name="stream"/> has been disposed.</exception>
            <remarks>This method already exists in .NET 4.0.</remarks>
        </member>
        <member name="T:Vizistata.FilePath">
            <summary>
            Represents a valid file path.  This class may not be inherited.  Instances of this class are immutable.
            </summary>
        </member>
        <member name="F:Vizistata.FilePath._value">
            <summary>
            The actual file path value.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.FilePath.MaximumFileLength">
            <summary>
            The maximum length of a file name.
            </summary>
        </member>
        <member name="M:Vizistata.FilePath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FilePath"/> class.
            </summary>
            <param name="value">The value of the file path.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> has a length of 0.
            -or- <paramref name="value"/> contains only white-space characters.
            -or- The <see cref="P:String.Length"/> property of <paramref name="value"/> exceeds <see cref="F:FileName.MaximumFileLength"/>.
            -or- <paramref name="value"/> contains any characters defined by <see cref="M:Path.GetInvalidPathChars"/>.
            -or- <paramref name="value"/> contains any characters defined by <see cref="M:Path.GetInvalidFileNameChars"/>.</exception>
        </member>
        <member name="M:Vizistata.FilePath.AreEqual(Vizistata.FilePath,Vizistata.FilePath)">
            <summary>
            Determines if the two objects specified are equal.
            </summary>
            <param name="objA">The first object to compare.</param>
            <param name="objB">The second object to compare.</param>
            <returns><c>true</c> if the two objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.FilePath.AreEqual(Vizistata.FilePath,System.String)">
            <summary>
            Determines if the two objects specified are equal.
            </summary>
            <param name="filePath">The first object to compare.</param>
            <param name="value">The second object to compare.</param>
            <returns><c>true</c> if the two objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.FilePath.Equals(System.Object)">
            <summary>
            Returns a value indicating if the object specified is equal to this instance.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if the object specified is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.FilePath.Equals(Vizistata.FilePath)">
            <summary>
            Returns a value indicating if the object specified is equal to this instance.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if the object specified is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.FilePath.Equals(System.String)">
            <summary>
            Returns a value indicating if the object specified is equal to this instance.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if the object specified is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.FilePath.Exists">
            <summary>
            Returns a value indicating if the file exists and the current user has permission to access the file.
            </summary>
            <returns><c>true</c> if the file exists and the current user has permission to access the file; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.FilePath.GetHashCode">
            <summary>
            Returns a value that can be used as a hash code for this instance.
            </summary>
            <returns>A value that can be used as a hash code for this instance.</returns>
        </member>
        <member name="M:Vizistata.FilePath.Open(System.IO.FileMode)">
            <summary>
            Opens the file referenced by this instance.
            </summary>
            <param name="mode">Specifies the actions to take when opening the file.</param>
            <returns>A <see cref="T:FileStream"/> object that can be used to access the file.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified by this instance is invalid, (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified by this instance was not found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The path specified a file that is read-only and access is not Read.
            -or- The path specified a directory.
            -or- The caller does not have the required permission.</exception>
        </member>
        <member name="M:Vizistata.FilePath.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the file referenced by this instance.
            </summary>
            <param name="mode">Specifies the actions to take when opening the file.</param>
            <param name="access">Specifies how the file should be accessed.</param>
            <returns>A <see cref="T:FileStream"/> object that can be used to access the file.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified by this instance is invalid, (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified by this instance was not found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The path specified a file that is read-only and access is not Read.
            -or- The path specified a directory.
            -or- The caller does not have the required permission.</exception>
        </member>
        <member name="M:Vizistata.FilePath.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens the file referenced by this instance.
            </summary>
            <param name="mode">Specifies the actions to take when opening the file.</param>
            <param name="access">Specifies how the file should be accessed.</param>
            <param name="share">Specifies actions to take for sharing access to the file.</param>
            <returns>A <see cref="T:FileStream"/> object that can be used to access the file.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified by this instance is invalid, (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified by this instance was not found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The path specified a file that is read-only and access is not Read.
            -or- The path specified a directory.
            -or- The caller does not have the required permission.</exception>
        </member>
        <member name="M:Vizistata.FilePath.OpenRead">
            <summary>
            Opens the file referenced by this instance as read-only.
            </summary>
            <returns>A <see cref="T:FileStream"/> object that can be used to access the file.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified by this instance is invalid, (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified by this instance was not found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The path specified a file that is read-only and access is not Read.
            -or- The path specified a directory.
            -or- The caller does not have the required permission.</exception>
        </member>
        <member name="M:Vizistata.FilePath.OpenWrite">
            <summary>
            Opens the file referenced by this instance for writing.
            </summary>
            <returns>A <see cref="T:FileStream"/> object that can be used to access the file.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified by this instance is invalid, (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified by this instance was not found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The path specified a file that is read-only and access is not Read.
            -or- The path specified a directory.
            -or- The caller does not have the required permission.</exception>
        </member>
        <member name="M:Vizistata.FilePath.ToString">
            <summary>
            Returns the string value of this instance.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:Vizistata.FilePath.op_Equality(Vizistata.FilePath,Vizistata.FilePath)">
            <summary>
            Determines if the two objects specified are equal.
            </summary>
            <param name="objA">The first object to compare.</param>
            <param name="objB">The second object to compare.</param>
            <returns><c>true</c> if the two objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.FilePath.op_Equality(Vizistata.FilePath,System.String)">
            <summary>
            Determines if the two objects specified are equal.
            </summary>
            <param name="filePath">The first object to compare.</param>
            <param name="value">The second object to compare.</param>
            <returns><c>true</c> if the two objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.FilePath.op_Equality(System.String,Vizistata.FilePath)">
            <summary>
            Determines if the two objects specified are equal.
            </summary>
            <param name="value">The second object to compare.</param>
            <param name="filePath">The first object to compare.</param>
            <returns><c>true</c> if the two objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.FilePath.op_Inequality(Vizistata.FilePath,Vizistata.FilePath)">
            <summary>
            Determines if the two objects specified are not equal.
            </summary>
            <param name="objA">The first object to compare.</param>
            <param name="objB">The second object to compare.</param>
            <returns><c>true</c> if the two objects not are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.FilePath.op_Inequality(Vizistata.FilePath,System.String)">
            <summary>
            Determines if the two objects specified are not equal.
            </summary>
            <param name="filePath">The first object to compare.</param>
            <param name="value">The second object to compare.</param>
            <returns><c>true</c> if the two objects not are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.FilePath.op_Inequality(System.String,Vizistata.FilePath)">
            <summary>
            Determines if the two objects specified are not equal.
            </summary>
            <param name="value">The second object to compare.</param>
            <param name="filePath">The first object to compare.</param>
            <returns><c>true</c> if the two objects not are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.FilePath.op_Implicit(Vizistata.FilePath)~System.String">
            <summary>
            Implicitly casts a <see cref="T:FilePath"/> object into a <see cref="T:String"/> instance.
            </summary>
            <param name="instance">The object to cast.</param>
            <returns>The <see cref="T:String"/> representation of <paramref name="instance"/>.</returns>
        </member>
        <member name="M:Vizistata.FilePath.op_Explicit(System.String)~Vizistata.FilePath">
            <summary>
            Explicitly casts a <see cref="T:String"/> object into a <see cref="T:FilePath"/> instance.
            </summary>
            <param name="instance">The object to cast.</param>
            <returns>The <see cref="T:FileName"/> representation of <paramref name="instance"/>.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="instance"/> is not valid for the <see cref="T:FilePath"/> class.</exception>
        </member>
        <member name="T:Vizistata.Transactional`1">
            <summary>
            Represents a value that can be rolled back to its original value or committed.  This class may not be inherited.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="F:Vizistata.Transactional`1._currentValue">
            <summary>
            The current value.
            </summary>
        </member>
        <member name="F:Vizistata.Transactional`1._originalValue">
            <summary>
            The original value.
            </summary>
        </member>
        <member name="M:Vizistata.Transactional`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Transactional&lt;T&gt;"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.Transactional`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Transactional&lt;T&gt;"/> class.
            </summary>
            <param name="value">The value.  This will also be used as the original value.</param>
        </member>
        <member name="M:Vizistata.Transactional`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Transactional&lt;T&gt;"/> class.
            </summary>
            <param name="currentValue">The current value.</param>
            <param name="originalValue">The original value.</param>
        </member>
        <member name="M:Vizistata.Transactional`1.AreEqual(Vizistata.Transactional{`0},Vizistata.Transactional{`0})">
            <summary>
            Returns a value indicating if the two objects specified are equal.
            </summary>
            <param name="objA">The first object to compare.</param>
            <param name="objB">The second object to compare.</param>
            <returns><c>true</c> if the two objects specified are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Transactional`1.AreEqual(Vizistata.Transactional{`0},`0)">
            <summary>
            Returns a value indicating if the two objects specified are equal.
            </summary>
            <param name="objA">The first object to compare.</param>
            <param name="objB">The second object to compare.</param>
            <returns><c>true</c> if the two objects specified are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Transactional`1.Commit">
            <summary>
            Commits any changes in this instance.
            </summary>
        </member>
        <member name="M:Vizistata.Transactional`1.Equals(System.Object)">
            <summary>
            Returns a value indicating if the object specified is equal to this instance.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if the object specified is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Transactional`1.Equals(Vizistata.Transactional{`0})">
            <summary>
            Returns a value indicating if the object specified is equal to this instance.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if the object specified is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Transactional`1.Equals(`0)">
            <summary>
            Returns a value indicating if the object specified is equal to this instance.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if the object specified is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Transactional`1.GetHashCode">
            <summary>
            Returns a value that serves as a hash code for this instance.
            </summary>
            <returns>The value that serves as the hash code for this instance.</returns>
        </member>
        <member name="M:Vizistata.Transactional`1.Rollback">
            <summary>
            Rolls back any changes made to this instance.
            </summary>
        </member>
        <member name="M:Vizistata.Transactional`1.Set(`0)">
            <summary>
            Sets the current value of this instance.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Vizistata.Transactional`1.Set(`0,System.Boolean)">
            <summary>
            Sets the current value of this instance.
            </summary>
            <param name="value">The value to set.</param>
            <param name="commit">If <c>true</c> the value will be immediately committed.</param>
        </member>
        <member name="M:Vizistata.Transactional`1.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:Vizistata.Transactional`1.op_Equality(Vizistata.Transactional{`0},Vizistata.Transactional{`0})">
            <summary>
            Returns a value indicating if the two objects specified are equal.
            </summary>
            <param name="objA">The first object to compare.</param>
            <param name="objB">The second object to compare.</param>
            <returns><c>true</c> if the two objects specified are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Transactional`1.op_Equality(Vizistata.Transactional{`0},`0)">
            <summary>
            Returns a value indicating if the two objects specified are equal.
            </summary>
            <param name="objA">The first object to compare.</param>
            <param name="objB">The second object to compare.</param>
            <returns><c>true</c> if the two objects specified are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Transactional`1.op_Equality(`0,Vizistata.Transactional{`0})">
            <summary>
            Returns a value indicating if the two objects specified are equal.
            </summary>
            <param name="objA">The first object to compare.</param>
            <param name="objB">The second object to compare.</param>
            <returns><c>true</c> if the two objects specified are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Transactional`1.op_Inequality(Vizistata.Transactional{`0},Vizistata.Transactional{`0})">
            <summary>
            Returns a value indicating if the two objects specified are not equal.
            </summary>
            <param name="objA">The first object to compare.</param>
            <param name="objB">The second object to compare.</param>
            <returns><c>true</c> if the two objects specified are not equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Transactional`1.op_Inequality(Vizistata.Transactional{`0},`0)">
            <summary>
            Returns a value indicating if the two objects specified are not equal.
            </summary>
            <param name="objA">The first object to compare.</param>
            <param name="objB">The second object to compare.</param>
            <returns><c>true</c> if the two objects specified are not equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Transactional`1.op_Inequality(`0,Vizistata.Transactional{`0})">
            <summary>
            Returns a value indicating if the two objects specified are not equal.
            </summary>
            <param name="objA">The first object to compare.</param>
            <param name="objB">The second object to compare.</param>
            <returns><c>true</c> if the two objects specified are not equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Transactional`1.op_Implicit(Vizistata.Transactional{`0})~`0">
            <summary>
            Implicitly converts an object of type <see cref="T:Transactional&lt;T&gt;"/> to type <typeparamref name="T"/>.
            </summary>
            <param name="instance">The object to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Vizistata.Transactional`1.op_Implicit(`0)~Vizistata.Transactional{`0}">
            <summary>
            Implicitly converts an object of type <typeparamref name="T"/> to type <see cref="T:Transactional&lt;T&gt;"/>.
            </summary>
            <param name="instance">The object to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="P:Vizistata.Transactional`1.CurrentValue">
            <summary>
            Gets the current value.
            </summary>
        </member>
        <member name="P:Vizistata.Transactional`1.IsDirty">
            <summary>
            Gets a value indicating if this instance has been changed from its original value.
            </summary>
        </member>
        <member name="P:Vizistata.Transactional`1.OriginalValue">
            <summary>
            Gets the original value.
            </summary>
        </member>
        <member name="T:Vizistata.StringExtensions">
            <summary>
            Provides extension methods for the <see cref="T:String"/> class.  This class may not be inherited.
            </summary>
        </member>
        <member name="M:Vizistata.StringExtensions.ContainsAny(System.String,System.Char[])">
            <summary>
            Determines whether the string contains any of the characters specified.
            </summary>
            <param name="instance">The instance on which to call the method.</param>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <returns><c>true</c> if the string contains any of the characters specified; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="anyOf"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.StringExtensions.FormatCurrentCulture(System.String,System.Object[])">
            <summary>
            Returns a formatted string using the current thread's culture.
            </summary>
            <param name="format">The <see cref="T:String"/> to use as the string format.</param>
            <param name="args">The array of string format arguments to provide.</param>
            <returns>The formatted string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/> is a null reference.</exception>
            <exception cref="T:System.FormatException">The format item in <paramref name="format"/> is invalid.
            -or- The number indicating an argument to format is less than zero, or greater than or equal to the number of specified objects to format.</exception>
        </member>
        <member name="M:Vizistata.StringExtensions.FormatCurrentUICulture(System.String,System.Object[])">
            <summary>
            Returns a formatted string using the current thread's UI culture.
            </summary>
            <param name="format">The <see cref="T:String"/> to use as the string format.</param>
            <param name="args">The array of string format arguments to provide.</param>
            <returns>The formatted string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/> is a null reference.</exception>
            <exception cref="T:System.FormatException">The format item in <paramref name="format"/> is invalid.
            -or- The number indicating an argument to format is less than zero, or greater than or equal to the number of specified objects to format.</exception>
        </member>
        <member name="M:Vizistata.StringExtensions.FormatInvariant(System.String,System.Object[])">
            <summary>
            Returns a formatted string using the current thread's culture.
            </summary>
            <param name="format">The <see cref="T:String"/> to use as the string format.</param>
            <param name="args">The array of string format arguments to provide.</param>
            <returns>The formatted string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/> is a null reference.</exception>
            <exception cref="T:System.FormatException">The format item in <paramref name="format"/> is invalid.
            -or- The number indicating an argument to format is less than zero, or greater than or equal to the number of specified objects to format.</exception>
        </member>
        <member name="M:Vizistata.StringExtensions.Join(System.String[],System.String)">
            <summary>
            Concatenates a specified separator string between each element of a specified array, yielding a single concatenated string.
            </summary>
            <param name="instance">The array of elements to join.</param>
            <param name="separator">The separator to apply between each two elements.</param>
            <returns>A string consisting of the elements of value interspersed with the separator string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.StringExtensions.Join(System.String[],System.Char)">
            <summary>
            Concatenates a specified separator string between each element of a specified array, yielding a single concatenated string.
            </summary>
            <param name="instance">The array of elements to join.</param>
            <param name="separator">The separator to apply between each two elements.</param>
            <returns>A string consisting of the elements of value interspersed with the separator string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.StringExtensions.Reverse(System.String)">
            <summary>
            Reverses the characters in the string and returns the result.
            </summary>
            <param name="value">The <see cref="T:String"/> whose characters should be reversed.</param>
            <returns>A <see cref="T:String"/> containing the reverse order of the characters in <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference.</exception>
        </member>
        <member name="T:Vizistata.Collections.NonNullDictionary`2">
            <summary>
            Represents a dictionary that cannot have null values.  This class may not be inherited.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="F:Vizistata.Collections.NonNullDictionary`2.DefaultCapacity">
            <summary>
            The default capacity = 16.
            </summary>
        </member>
        <member name="F:Vizistata.Collections.NonNullDictionary`2._innerDictionary">
            <summary>
            The inner dictionary.  This field is read-only.
            </summary>
            <remarks>Do not use this field directly.  Access the <see cref="P:InnerDictionary"/> property instead.</remarks>
        </member>
        <member name="M:Vizistata.Collections.NonNullDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NonNullDictionary&lt;TKey,TValue&gt;"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.Collections.NonNullDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NonNullDictionary&lt;TKey,TValue&gt;"/> class.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:NonNullDictionary&lt;TKey,TValue&gt;"/> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Vizistata.Collections.NonNullDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NonNullDictionary&lt;TKey,TValue&gt;"/> class.
            </summary>
            <param name="comparer">The <see cref="T:IEqualityComparer&lt;T&gt;"/> implementation to use when comparing keys, or null to use the default <see cref="T:EqualityComparer&lt;T&gt;"/> for the type of the key.</param>
        </member>
        <member name="M:Vizistata.Collections.NonNullDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NonNullDictionary&lt;TKey,TValue&gt;"/> class.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:NonNullDictionary&lt;TKey,TValue&gt;"/> can contain.</param>
            <param name="comparer">The <see cref="T:IEqualityComparer&lt;T&gt;"/> implementation to use when comparing keys, or null to use the default <see cref="T:EqualityComparer&lt;T&gt;"/> for the type of the key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Vizistata.Collections.NonNullDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:NonNullDictionary&lt;TKey,TValue&gt;"/> class.
            </summary>
            <param name="dictionary">The <see cref="T:IDictionary&lt;TKey,TValue&gt;"/> whose elements are copied to the new <see cref="T:NonNullDictionary&lt;TKey,TValue&gt;"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dictionary"/> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:Vizistata.Collections.NonNullDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NonNullDictionary&lt;TKey,TValue&gt;"/> class.
            </summary>
            <param name="dictionary">The <see cref="T:IDictionary&lt;TKey,TValue&gt;"/> whose elements are copied to the new <see cref="T:NonNullDictionary&lt;TKey,TValue&gt;"/>.</param>
            <param name="comparer">The <see cref="T:IEqualityComparer&lt;T&gt;"/> implementation to use when comparing keys, or null to use the default <see cref="T:EqualityComparer&lt;T&gt;"/> for the type of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dictionary"/> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:Vizistata.Collections.NonNullDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.
            -or- <paramref name="value"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the dictionary.</exception>
        </member>
        <member name="M:Vizistata.Collections.NonNullDictionary`2.Clear">
            <summary>
            Removes all keys and values from the dictionary.
            </summary>
        </member>
        <member name="M:Vizistata.Collections.NonNullDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns><c>true</c> if the dictionary contains an element with the key; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Collections.NonNullDictionary`2.ContainsValue(`1)">
            <summary>
            Returns a value indicating if the dictionary contains a specific value.
            </summary>
            <param name="value">The value to locate in the dictionary.</param>
            <returns><c>true</c> if the dictionary contains an element with the specified value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Collections.NonNullDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vizistata.Collections.NonNullDictionary`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><c>true</c> if the element is successfully found and removed; otherwise, <c>false</c>.  This method returns <c>false</c> if <paramref name="key"/> is not found in the dictionary.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Collections.NonNullDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.  This parameter is passed uninitialized.</param>
            <returns><c>true</c> if this instance contains an element with the specified key; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
        </member>
        <member name="P:Vizistata.Collections.NonNullDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <returns>The element with the specified key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.
            -or- <paramref name="value"/> is a null reference.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/> is not found.</exception>
        </member>
        <member name="P:Vizistata.Collections.NonNullDictionary`2.Comparer">
            <summary>
            Gets the object that is used to determine equality of keys for the dictionary.
            </summary>
        </member>
        <member name="P:Vizistata.Collections.NonNullDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the dictionary.
            </summary>
        </member>
        <member name="P:Vizistata.Collections.NonNullDictionary`2.InnerDictionary">
            <summary>
            Gets the inner dictionary.
            </summary>
        </member>
        <member name="P:Vizistata.Collections.NonNullDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the dictionary.
            </summary>
        </member>
        <member name="P:Vizistata.Collections.NonNullDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the dictionary.
            </summary>
        </member>
        <member name="T:Vizistata.DoubleExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Double"/> class.  This class may not be inherited.
            </summary>
        </member>
        <member name="M:Vizistata.DoubleExtensions.FormatCurrentCulture(System.Double)">
            <summary>
            Returns the string representation of a number using the current culture as a format provider.
            </summary>
            <param name="value">The value whose string representation should be returned.</param>
            <returns>The string representation of the number.</returns>
        </member>
        <member name="M:Vizistata.DoubleExtensions.FormatCurrentCulture(System.Double,System.String)">
            <summary>
            Returns the string representation of a number using the current culture as a format provider.
            </summary>
            <param name="value">The value whose string representation should be returned.</param>
            <param name="format">The string format to use.</param>
            <returns>The string representation of the number.</returns>
        </member>
        <member name="M:Vizistata.DoubleExtensions.FormatCurrentCulture(System.Nullable{System.Double})">
            <summary>
            Returns the string representation of a number using the current culture as a format provider.
            </summary>
            <param name="value">The value whose string representation should be returned.</param>
            <returns>The string representation of the number.</returns>
        </member>
        <member name="M:Vizistata.DoubleExtensions.FormatCurrentCulture(System.Nullable{System.Double},System.String)">
            <summary>
            Returns the string representation of a number using the current culture as a format provider.
            </summary>
            <param name="value">The value whose string representation should be returned.</param>
            <param name="format">The string format to use.</param>
            <returns>The string representation of the number.</returns>
        </member>
        <member name="M:Vizistata.DoubleExtensions.FormatInvariant(System.Double)">
            <summary>
            Returns the string representation of a number using the invariant culture as a format provider.
            </summary>
            <param name="value">The value whose string representation should be returned.</param>
            <returns>The string representation of the number.</returns>
        </member>
        <member name="M:Vizistata.DoubleExtensions.FormatInvariant(System.Double,System.String)">
            <summary>
            Returns the string representation of a number using the invariant culture as a format provider.
            </summary>
            <param name="value">The value whose string representation should be returned.</param>
            <param name="format">The string format to use.</param>
            <returns>The string representation of the number.</returns>
        </member>
        <member name="M:Vizistata.DoubleExtensions.FormatInvariant(System.Nullable{System.Double})">
            <summary>
            Returns the string representation of a number using the invariant culture as a format provider.
            </summary>
            <param name="value">The value whose string representation should be returned.</param>
            <returns>The string representation of the number.</returns>
        </member>
        <member name="M:Vizistata.DoubleExtensions.FormatInvariant(System.Nullable{System.Double},System.String)">
            <summary>
            Returns the string representation of a number using the invariant culture as a format provider.
            </summary>
            <param name="value">The value whose string representation should be returned.</param>
            <param name="format">The string format to use.</param>
            <returns>The string representation of the number.</returns>
        </member>
        <member name="T:Vizistata.ClientServiceException">
            <summary>
            Represents an error that occurs client-side during a service call.
            </summary>
        </member>
        <member name="T:Vizistata.ServiceException">
            <summary>
            Represents an error that occurs during a service call.
            </summary>
        </member>
        <member name="M:Vizistata.ServiceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceException"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.ServiceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Vizistata.ServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Contains additional information about the error.</param>
        </member>
        <member name="M:Vizistata.ServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceException"/> class.
            </summary>
            <param name="info">Contains information used to serialize/deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialization.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is a null reference.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">An error occurs during the deserialization process.</exception>
        </member>
        <member name="M:Vizistata.ClientServiceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ClientServiceException"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.ClientServiceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ClientServiceException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Vizistata.ClientServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ClientServiceException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Contains additional information about the error.</param>
        </member>
        <member name="M:Vizistata.ClientServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ClientServiceException"/> class.
            </summary>
            <param name="info">Contains information used to serialize/deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialization.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is a null reference.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">An error occurs during the deserialization process.</exception>
        </member>
        <member name="T:Vizistata.Linq.ObjectExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Object"/> class.  This class may not be inherited.
            </summary>
        </member>
        <member name="M:Vizistata.Linq.ObjectExtensions.Project``2(``0,System.Func{``0,``1})">
            <summary>
            Projects an object forward onto a new object type.
            </summary>
            <typeparam name="TInput">The type of object to be projected.</typeparam>
            <typeparam name="TOutput">The type of object that will be the projection.</typeparam>
            <param name="instance">The object to be projected.</param>
            <param name="projection">The projection function.</param>
            <returns>The projection created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="projection"/> is a null reference.</exception>
        </member>
        <member name="T:Vizistata.Data.DataRecordPropertyDescriptor">
            <summary>
            A strongly-typed property descriptor for the <see cref="T:DataRecord"/> class.  This class may not be inherited.
            </summary>
        </member>
        <member name="F:Vizistata.Data.DataRecordPropertyDescriptor._ordinal">
            <summary>
            The 0-based ordinal of the property.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Data.DataRecordPropertyDescriptor._type">
            <summary>
            The type of the property.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.Data.DataRecordPropertyDescriptor.#ctor(System.Int32,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:DataRecordPropertyDescriptor"/> class.
            </summary>
            <param name="ordinal">The 0-based ordinal of the property.</param>
            <param name="name">The name of the property.</param>
            <param name="type">The type of the property.</param>
        </member>
        <member name="M:Vizistata.Data.DataRecordPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Returns whether resetting an object changes its value.
            </summary>
            <param name="component">The component to test for reset capability.</param>
            <returns><c>true</c> if resetting the component changes its value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Data.DataRecordPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the current value of the property on a component.
            </summary>
            <param name="component">The component with the property for which to retrieve the value.</param>
            <returns>The value of a property for a given component.</returns>
        </member>
        <member name="M:Vizistata.Data.DataRecordPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Resets the value for this property of the component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value.</param>
        </member>
        <member name="M:Vizistata.Data.DataRecordPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Vizistata.Data.DataRecordPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <param name="component">The component with the property to be examined for persistence.</param>
            <returns><c>true</c> if the property should be persisted; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Vizistata.Data.DataRecordPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of the component this property is bound to.
            </summary>
        </member>
        <member name="P:Vizistata.Data.DataRecordPropertyDescriptor.IsReadOnly">
            <summary>
            Gets a value indicating whether this property is read-only.
            </summary>
        </member>
        <member name="P:Vizistata.Data.DataRecordPropertyDescriptor.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="T:Vizistata.ServerServiceException">
            <summary>
            Represents an error that occurs server-side during a service call.
            </summary>
        </member>
        <member name="M:Vizistata.ServerServiceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServerServiceException"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.ServerServiceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServerServiceException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Vizistata.ServerServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ServerServiceException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Contains additional information about the error.</param>
        </member>
        <member name="M:Vizistata.ServerServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ServerServiceException"/> class.
            </summary>
            <param name="info">Contains information used to serialize/deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialization.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is a null reference.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">An error occurs during the deserialization process.</exception>
        </member>
        <member name="T:Vizistata.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.AnInstance">
            <summary>
              Looks up a localized string similar to an instance.
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.ArgumentLengthDoesNotMatchTypeLengthMessage">
            <summary>
              Looks up a localized string similar to The length of the arguments must match the length of the types..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.AStatic">
            <summary>
              Looks up a localized string similar to a static.
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.AttributeMissingFormat">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; attribute is missing or empty..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.CollectionContainsElementWithInvalidCharactersMessage">
            <summary>
              Looks up a localized string similar to One of the nodes in the path contains invalid characters..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.CollectionContainsEmptyStringBeforeLastElementMessage">
            <summary>
              Looks up a localized string similar to One of the nodes other than the last node in the path specified is an empty string..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.CollectionContainsNullReferenceMessage">
            <summary>
              Looks up a localized string similar to The collection specified contains a null reference.  Null references are not allowed..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.CollectionMayNotBeEmptyMessage">
            <summary>
              Looks up a localized string similar to The collection is empty.  It must contain at least 1 element..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.ConfigurationSectionTypeNotKnownMessage">
            <summary>
              Looks up a localized string similar to The configuration section type specified is not known..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.ConstructorNotFoundMessage">
            <summary>
              Looks up a localized string similar to A constructor matching the arguments specified could not be found..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.DefaultTraceListenerSubjectFormat">
            <summary>
              Looks up a localized string similar to {0} trace log as of {1} at {2}.
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.DomainLabelIsEmptyMessage">
            <summary>
              Looks up a localized string similar to Each domain label must contain at least one character..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.DomainNameHasTooFewLabelsMessage">
            <summary>
              Looks up a localized string similar to Both of the first-level domain label and second-level domain label are required.  One or both is not specified in the value provided..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.DomainNameHasTooManyLabelsMessage">
            <summary>
              Looks up a localized string similar to The number of labels for a domain name is limited to 127.  There are too many sub-domain labels provided..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.DomainNameLengthTooLargeMessage">
            <summary>
              Looks up a localized string similar to The number of characters for the domain name exceeds 253..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.EmailAddressDomainContainsConsecutiveDotsMessage">
            <summary>
              Looks up a localized string similar to The domain of an e-mail address may not have two consecutive dots or periods..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.EmailAddressDomainEndsWithDotMessage">
            <summary>
              Looks up a localized string similar to The domain of an e-mail address may not end with a dot or period..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.EmailAddressDomainLengthInvalidMessage">
            <summary>
              Looks up a localized string similar to The length of the e-mail address&apos;s domain must be between 1 and 253 characters..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.EmailAddressDomainPartInvalidCharactersMessage">
            <summary>
              Looks up a localized string similar to The domain of the e-mail address contains one more more characters not defined by HealthGrades.EmailAddress.GetValidDomainCharacters()..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.EmailAddressDomainStartsWithDotMessage">
            <summary>
              Looks up a localized string similar to The domain of an e-mail address may not start with a dot or period..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.EmailAddressHasTooManyPartsMessage">
            <summary>
              Looks up a localized string similar to An e-mail address must have exactly one @ symbol..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.EmailAddressLocalPartAndDomainTooLongMessage">
            <summary>
              Looks up a localized string similar to When combined with the domain, the local-part and domain cannot exceed 254 characters..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.EmailAddressLocalPartContainsConsecutiveDotsMessage">
            <summary>
              Looks up a localized string similar to The local-part of an e-mail address may not have two consecutive dots or periods..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.EmailAddressLocalPartEndsWithDotMessage">
            <summary>
              Looks up a localized string similar to The local-part of an e-mail address may not end with a dot or period..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.EmailAddressLocalPartInvalidCharactersMessage">
            <summary>
              Looks up a localized string similar to The local-part of the e-mail address contains one more more characters not defined by HealthGrades.EmailAddress.GetValidLocalPartCharacters()..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.EmailAddressLocalPartLengthInvalidMessage">
            <summary>
              Looks up a localized string similar to The length of the e-mail address&apos;s local-part must be between 1 and 64 characters..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.EmailAddressLocalPartStartsWithDotMessage">
            <summary>
              Looks up a localized string similar to The local-part of an e-mail address may not start with a dot or period..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.EventLogTraceListenerLoggingErrorMessage">
            <summary>
              Looks up a localized string similar to The listener did not log to an event log.  Check that the event log exists and that the application has permission to access the event log..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.Field">
            <summary>
              Looks up a localized string similar to field.
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.FieldIsReadOnlyMessage">
            <summary>
              Looks up a localized string similar to The field is read-only..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.FileNameContainsInvalidFileNameCharactersMessage">
            <summary>
              Looks up a localized string similar to A file name may not have any characters as defined by Path.GetInvalidFileNameChars()..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.FileNameContainsInvalidPathCharactersMessage">
            <summary>
              Looks up a localized string similar to A file name may not have any characters as defined by Path.GetInvalidPathChars()..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.FromAddressAttributeInvalidPrefix">
            <summary>
              Looks up a localized string similar to The &apos;fromAddress&apos; attribute has a value that is not a valid e-mail address: .
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.InputStreamNotReadableMessage">
            <summary>
              Looks up a localized string similar to The input stream is not readable..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.InvalidCharacterAtSpecifiedPositionFormat">
            <summary>
              Looks up a localized string similar to A character ({0}) was found at position {1} that is invalid..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.IsBodyHtmlAttributeInvalidMessage">
            <summary>
              Looks up a localized string similar to The &apos;isBodyHtml&apos; attribute has a value that could not be parsed as a boolean..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.KeyExistsInQueryMessage">
            <summary>
              Looks up a localized string similar to The key specified already exists in the query..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.LackOfSeparatorPreventsInferrenceMessage">
            <summary>
              Looks up a localized string similar to The separator could not be inferred because no valid separator exists in the path..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.ListenerLoadErrorFormat">
            <summary>
              Looks up a localized string similar to A listener ({0}) could not be loaded for the following reason: {1}{2}See the inner exception for more details..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.ListenerTypeInvalidFormat">
            <summary>
              Looks up a localized string similar to The type specified ({0}) for the listener ({1}) is not valid or does not derive from {2}..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.ListenerTypeMissingFormat">
            <summary>
              Looks up a localized string similar to No type was specified for the listener ({0})..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.MemberNotOnTypeFormat">
            <summary>
              Looks up a localized string similar to The field specified {0} does not exist on the type as {1} {2}..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.MessageQueueIsNotWriteableMessage">
            <summary>
              Looks up a localized string similar to The message queue is not available for writing.  Only writeable message queues may be used..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.MethodNotFoundMessage">
            <summary>
              Looks up a localized string similar to A method matching the arguments specified could not be found..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.MsmqPathInvalidPrefix">
            <summary>
              Looks up a localized string similar to The &apos;path&apos; attribute has a value that does not point to a valid MSMQ queue: .
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.MultipleSeparatorsPreventsInferrenceMessage">
            <summary>
              Looks up a localized string similar to The separator could not be inferred because multiple valid separators exist in the path..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.NoTraceListenersInConfigFileMessage">
            <summary>
              Looks up a localized string similar to No trace listeners other than the default exist within the current configuration..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.OutputStreamNotWriteableMessage">
            <summary>
              Looks up a localized string similar to The output stream is not writeable..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.PathContainsInvalidCharactersMessage">
            <summary>
              Looks up a localized string similar to The path contains invalid characters..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.PathForTypeAlreadyKnownMessage">
            <summary>
              Looks up a localized string similar to The path for the type specified is already known..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.PerformanceLoggingScopeFinishFormat">
            <summary>
              Looks up a localized string similar to Performance scope &apos;{0}.{1}&apos; ended at {2} with a duration of {3}..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.PerformanceLoggingScopeStartFormat">
            <summary>
              Looks up a localized string similar to Performance scope &apos;{0}.{1}&apos; started at {2}..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.PhoneNumberAreaCodeLengthInvalidMessage">
            <summary>
              Looks up a localized string similar to The area code must contain exactly three letters and/or numbers..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.PhoneNumberContainsInvalidCharactersMessage">
            <summary>
              Looks up a localized string similar to A phone number may only contain letters and numbers..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.PhoneNumberCountryCodeInvalidMessage">
            <summary>
              Looks up a localized string similar to The country code must be a valid number for a country..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.PhoneNumberSubscriberGroupsContainsNullMessage">
            <summary>
              Looks up a localized string similar to The subscriber groups may not contain a null reference..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.PhoneNumberSubscriberGroupsDigitsLengthInvalidMessage">
            <summary>
              Looks up a localized string similar to The total number of digits in the subscriber groups must be at least 7 and must not be greater that 15..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.PhoneNumberSubscriberGroupsInvalidLengthMessage">
            <summary>
              Looks up a localized string similar to There must be at least one subscriber number group..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.PhoneNumberSupportsUSOnly">
            <summary>
              Looks up a localized string similar to Currently, only the United States of America (1) is supported..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.PhoneNumberUnitedStatesNumberHasInvalidLengthMessage">
            <summary>
              Looks up a localized string similar to A United States phone number must contain at least 10 digits..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.Property">
            <summary>
              Looks up a localized string similar to property.
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.PropertyIsReadOnlyMessage">
            <summary>
              Looks up a localized string similar to The property is read-only..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.PropertyIsWriteOnlyMessage">
            <summary>
              Looks up a localized string similar to The property is write-only..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.ProviderInvalidFormat">
            <summary>
              Looks up a localized string similar to The {0} configuration is invalid:.
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.ProviderTypeIncorrectFormat">
            <summary>
              Looks up a localized string similar to The provider specified is not of the type {0}..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.SeparatorNotSupportedMessage">
            <summary>
              Looks up a localized string similar to The path contains a separator that is not supported by this instance..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.SeparatorNotValidMessage">
            <summary>
              Looks up a localized string similar to The separator specified is not valid..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.StringMayNotBeEmptyMessage">
            <summary>
              Looks up a localized string similar to The value contains 0 characters.  It must contain at least one character..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.TextWriterTraceListenerLoggingErrorMessage">
            <summary>
              Looks up a localized string similar to The listener did not log to a text file.  Check the path to the file exists and that the application has permission to create/modify files in that directory..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.ToAddressesAttributeInvalidPrefix">
            <summary>
              Looks up a localized string similar to The &apos;toAddresses&apos; attribute has a value that does not contain valid e-mail addresses: .
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.TrimmedValueIsEmptyMessage">
            <summary>
              Looks up a localized string similar to The value specified is empty or contains only white-space characters.  At least one non-white-space character is required..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.TypeMayNotBeAbstractMessage">
            <summary>
              Looks up a localized string similar to The type specified is abstract.  Abstract types are not allowed..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.TypeNeedsToHaveSpecificBaseClassFormat">
            <summary>
              Looks up a localized string similar to The type does not derive from {0}.  Only types that derive from {0} are allowed..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.ValueIsEmptyMessage">
            <summary>
              Looks up a localized string similar to The value specified is empty.  Empty value are not allowed..
            </summary>
        </member>
        <member name="P:Vizistata.Properties.Resources.ValueLengthExceededFormat">
            <summary>
              Looks up a localized string similar to The length of the value specified exceeds the maximum length of {0}..
            </summary>
        </member>
        <member name="T:Vizistata.Diagnostics.LoggingExtensions">
            <summary>
            Provides logging functionality for the application.  This class may not be inherited.
            </summary>
        </member>
        <member name="F:Vizistata.Diagnostics.LoggingExtensions._indentLevel">
            <summary>
            The current indentation level.
            </summary>
        </member>
        <member name="F:Vizistata.Diagnostics.LoggingExtensions._indentSize">
            <summary>
            The size of each indentation level in spaces.
            </summary>
        </member>
        <member name="F:Vizistata.Diagnostics.LoggingExtensions._source">
            <summary>
            The trace source to which to log information.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Diagnostics.LoggingExtensions._synchronizationObject">
            <summary>
            Allows the operations in this instance to be thread-safe.
            </summary>
        </member>
        <member name="F:Vizistata.Diagnostics.LoggingExtensions.TraceSourceName">
            <summary>
            Gets the name of the trace source used by this type.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.Diagnostics.LoggingExtensions.CreatePerformanceLoggingScope(System.Object,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:PerformanceLoggingScope"/> class.
            </summary>
            <param name="source">The source of the scope.  This is the object (or type) to which the name of the scope belongs.</param>
            <param name="name">The name of the scope.  This is usually the property or method name.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is a null reference.
            -or- <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.LoggingExtensions.CreatePerformanceLoggingScope(System.Object,System.String,System.Diagnostics.TraceEventType)">
            <summary>
            Creates a new instance of the <see cref="T:PerformanceLoggingScope"/> class.
            </summary>
            <param name="source">The source of the scope.  This is the object (or type) to which the name of the scope belongs.</param>
            <param name="name">The name of the scope.  This is usually the property or method name.</param>
            <param name="eventType">The type of event type to log.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is a null reference.
            -or- <paramref name="name"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventType"/> is not defined by <see cref="T:TraceEventType"/>.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.LoggingExtensions.Indent">
            <summary>
            Indents the logging by one level.
            </summary>
        </member>
        <member name="M:Vizistata.Diagnostics.LoggingExtensions.Log(System.Diagnostics.TraceEventType,System.Object,System.String,System.Object[])">
            <summary>
            Logs a mesage to the trace source.
            </summary>
            <param name="eventType">The event type to log.</param>
            <param name="instance">The object that caused the event.</param>
            <param name="message">The message or format to log.</param>
            <param name="args">The optional list of arguments to provide when formatting <paramref name="message"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="message"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.LoggingExtensions.LogCritical(System.Object,System.String,System.Object[])">
            <summary>
            Logs a critical message.
            </summary>
            <param name="instance">The instance on which to invoke the method.</param>
            <param name="message">The message or format to log.</param>
            <param name="args">The optional list of arguments to provide when formatting <paramref name="message"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="message"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.LoggingExtensions.LogError(System.Object,System.String,System.Object[])">
            <summary>
            Logs an error message.
            </summary>
            <param name="instance">The instance on which to invoke the method.</param>
            <param name="message">The message or format to log.</param>
            <param name="args">The optional list of arguments to provide when formatting <paramref name="message"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="message"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.LoggingExtensions.LogInformation(System.Object,System.String,System.Object[])">
            <summary>
            Logs an information message.
            </summary>
            <param name="instance">The instance on which to invoke the method.</param>
            <param name="message">The message or format to log.</param>
            <param name="args">The optional list of arguments to provide when formatting <paramref name="message"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="message"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.LoggingExtensions.LogVerbose(System.Object,System.String,System.Object[])">
            <summary>
            Logs a verbose message.
            </summary>
            <param name="instance">The instance on which to invoke the method.</param>
            <param name="message">The message or format to log.</param>
            <param name="args">The optional list of arguments to provide when formatting <paramref name="message"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="message"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.LoggingExtensions.LogWarning(System.Object,System.String,System.Object[])">
            <summary>
            Logs a warning message.
            </summary>
            <param name="instance">The instance on which to invoke the method.</param>
            <param name="message">The message or format to log.</param>
            <param name="args">The optional list of arguments to provide when formatting <paramref name="message"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="message"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.LoggingExtensions.TestListener(System.Diagnostics.TraceListener,System.String,System.String)">
            <summary>
            Tests a trace listener to ensure it can log correctly.
            </summary>
            <param name="instance">The instance on which to invoke the method.</param>
            <param name="message">The message to test.</param>
            <param name="category">The optional category to use to test.</param>
            <exception cref="T:Vizistata.Diagnostics.TraceListenerConfigurationException">The trace listener is not setup correctly or does not have sufficient privileges to log messages.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.LoggingExtensions.TestLogging(System.String)">
            <summary>
            Tests the logging implementation to ensure that it is working.
            </summary>
            <param name="message">The message to use for testing the logging functionality.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is a null reference.</exception>
            <exception cref="T:Vizistata.Diagnostics.TraceListenerConfigurationException">The trace source has no listeners other than the default listener.
            -or- A trace listener is not setup correctly or does not have sufficient privileges to log messages.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.LoggingExtensions.Unindent">
            <summary>
            Unindents the logging by one level.
            </summary>
            <exception cref="T:System.InvalidOperationException">The value of <see cref="P:IndentLevel"/> is less than 1.</exception>
        </member>
        <member name="P:Vizistata.Diagnostics.LoggingExtensions.IndentLevel">
            <summary>
            Gets or sets the indentation level.
            </summary>
        </member>
        <member name="P:Vizistata.Diagnostics.LoggingExtensions.IndentSize">
            <summary>
            Gets or sets the number of spaces for an indentation level.
            </summary>
        </member>
        <member name="P:Vizistata.Diagnostics.LoggingExtensions.SynchronizationObject">
            <summary>
            Gets the object that can be locked to make this method's operations thread-safe.
            </summary>
        </member>
        <member name="T:Vizistata.Collections.ReverseComparer`1">
            <summary>
            A comparer that reverses the order of the default comparer.  This class may not be inherited.
            </summary>
        </member>
        <member name="F:Vizistata.Collections.ReverseComparer`1._comparer">
            <summary>
            The comparer to reverse.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.Collections.ReverseComparer`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ReverseComparer"/> class.
            </summary>
            <param name="comparer">The comparer to reverse.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Collections.ReverseComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following information.
            Less than zero: <paramref name="x"/> is less than <paramref name="y"/>.
            Zero: <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero: <paramref name="x"/> is greater than <paramref name="y"/>.</returns>
        </member>
        <member name="P:Vizistata.Collections.ReverseComparer`1.Default">
            <summary>
            Gets the default reversed sort order comparer.
            </summary>
        </member>
        <member name="T:Vizistata.AsyncJob">
            <summary>
            Acts as the base class for operations that execute asynchronously on a separate thread.
            </summary>
        </member>
        <member name="F:Vizistata.AsyncJob._error">
            <summary>
            The error that occurred during execution, or a null reference.
            </summary>
        </member>
        <member name="F:Vizistata.AsyncJob._shouldBeRunning">
            <summary>
            <c>true</c> if this instance should be running; otherwise, <c>false</c>.
            </summary>
            <remarks>This is different from the <see cref="P:IsRunning"/> property in that this field indicates whether the main loop should continue.</remarks>
        </member>
        <member name="F:Vizistata.AsyncJob._thread">
            <summary>
            The thread on which the job runs.
            </summary>
        </member>
        <member name="F:Vizistata.AsyncJob._threadDoor">
            <summary>
            Controls access to the <see cref="F:_thread"/> field.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.AsyncJob.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AsyncJob"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.AsyncJob.ExecuteOne">
            <summary>
            Executes a single operation in the job.
            </summary>
        </member>
        <member name="M:Vizistata.AsyncJob.MainLoop">
            <summary>
            Acts as the main loop for the job's thread.
            </summary>
        </member>
        <member name="M:Vizistata.AsyncJob.ReleaseManagedResources">
            <summary>
            Releases any managed resources held by this instance.
            </summary>
        </member>
        <member name="M:Vizistata.AsyncJob.Start">
            <summary>
            Starts this instance.  Subsequent calls will result in no side effects.
            </summary>
        </member>
        <member name="M:Vizistata.AsyncJob.Stop">
            <summary>
            Stops this instance.  Subsequent calls will result in no side effects.
            </summary>
        </member>
        <member name="M:Vizistata.AsyncJob.WaitToStop(System.TimeSpan)">
            <summary>
            Blocks the current executing thread to wait for this instance to stop on its own.
            </summary>
            <param name="timeoutDuration">The amount of time to wait.  The duration of the time span will be used.</param>
            <returns><c>true</c> if the instance stopped on its own; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Vizistata.AsyncJob.Error">
            <summary>
            Gets the error that occurred during execution, or a null reference.
            </summary>
        </member>
        <member name="P:Vizistata.AsyncJob.IsComplete">
            <summary>
            Gets a value indicating if this instance is complete or if it has additional operations to perform.
            </summary>
        </member>
        <member name="P:Vizistata.AsyncJob.IsRunning">
            <summary>
            Gets a value indicating if this instance is running.
            </summary>
        </member>
        <member name="T:Vizistata.DateTimeExtensions">
            <summary>
            Provides extension methods for the <see cref="T:DateTime"/> struct.  This class may not be inherited.
            </summary>
        </member>
        <member name="M:Vizistata.DateTimeExtensions.FormatCurrentCulture(System.DateTime)">
            <summary>
            Formats the date and time object using the current culture.
            </summary>
            <param name="dateTime">The date and time to format.</param>
            <returns>The formatted string for the date and time object.</returns>
        </member>
        <member name="M:Vizistata.DateTimeExtensions.FormatCurrentCulture(System.DateTime,System.String)">
            <summary>
            Formats the date and time object using the current culture.
            </summary>
            <param name="dateTime">The date and time to format.</param>
            <param name="format">The string format to use for formatting.</param>
            <returns>The formatted string for the date and time object.</returns>
            <exception cref="T:System.FormatException">The length of <paramref name="format"/> is 1, and it is not one of the format specifier characters defined for <see cref="T:DateTimeFormatInfo"/>.
            -or- <paramref name="format"/> does not contain a valid custom format pattern.</exception>
        </member>
        <member name="M:Vizistata.DateTimeExtensions.FormatCurrentCulture(System.Nullable{System.DateTime})">
            <summary>
            Formats the date and time object using the current culture.
            </summary>
            <param name="dateTime">The date and time to format.</param>
            <returns>The formatted string for the date and time object.</returns>
        </member>
        <member name="M:Vizistata.DateTimeExtensions.FormatCurrentCulture(System.Nullable{System.DateTime},System.String)">
            <summary>
            Formats the date and time object using the current culture.
            </summary>
            <param name="dateTime">The date and time to format.</param>
            <param name="format">The string format to use for formatting.</param>
            <returns>The formatted string for the date and time object.</returns>
            <exception cref="T:System.FormatException">The length of <paramref name="format"/> is 1, and it is not one of the format specifier characters defined for <see cref="T:DateTimeFormatInfo"/>.
            -or- <paramref name="format"/> does not contain a valid custom format pattern.</exception>
        </member>
        <member name="M:Vizistata.DateTimeExtensions.FormatInvariant(System.DateTime)">
            <summary>
            Formats the date and time object using the invariant culture.
            </summary>
            <param name="dateTime">The date and time to format.</param>
            <returns>The formatted string for the date and time object.</returns>
        </member>
        <member name="M:Vizistata.DateTimeExtensions.FormatInvariant(System.DateTime,System.String)">
            <summary>
            Formats the date and time object using the invariant culture.
            </summary>
            <param name="dateTime">The date and time to format.</param>
            <param name="format">The string format to use for formatting.</param>
            <returns>The formatted string for the date and time object.</returns>
            <exception cref="T:System.FormatException">The length of <paramref name="format"/> is 1, and it is not one of the format specifier characters defined for <see cref="T:DateTimeFormatInfo"/>.
            -or- <paramref name="format"/> does not contain a valid custom format pattern.</exception>
        </member>
        <member name="M:Vizistata.DateTimeExtensions.FormatInvariant(System.Nullable{System.DateTime})">
            <summary>
            Formats the date and time object using the invariant culture.
            </summary>
            <param name="dateTime">The date and time to format.</param>
            <returns>The formatted string for the date and time object.</returns>
        </member>
        <member name="M:Vizistata.DateTimeExtensions.FormatInvariant(System.Nullable{System.DateTime},System.String)">
            <summary>
            Formats the date and time object using the invariant culture.
            </summary>
            <param name="dateTime">The date and time to format.</param>
            <param name="format">The string format to use for formatting.</param>
            <returns>The formatted string for the date and time object.</returns>
            <exception cref="T:System.FormatException">The length of <paramref name="format"/> is 1, and it is not one of the format specifier characters defined for <see cref="T:DateTimeFormatInfo"/>.
            -or- <paramref name="format"/> does not contain a valid custom format pattern.</exception>
        </member>
        <member name="M:Vizistata.DateTimeExtensions.IsValidForSqlServer(System.DateTime)">
            <summary>
            Returns a value indicating if the date/time value is valid for SQL Server.
            </summary>
            <param name="dateTime">The date/time value to check.</param>
            <returns><c>true</c> if the date/time value is valid for SQL Server; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Vizistata.RelativePath">
            <summary>
            Represents a relative path along with associated node information.  This class may not be inherited.  Instances of this class are immutable.
            </summary>
        </member>
        <member name="F:Vizistata.RelativePath.Backslash">
            <summary>
            A back slash = '\'.
            </summary>
        </member>
        <member name="F:Vizistata.RelativePath.ForwardSlash">
            <summary>
            A forward slash = '/'.
            </summary>
        </member>
        <member name="F:Vizistata.RelativePath._nodes">
            <summary>
            The collection of nodes in the path.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.RelativePath._separator">
            <summary>
            The separator for the nodes.
            </summary>
        </member>
        <member name="M:Vizistata.RelativePath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RelativePath"/> class.
            </summary>
            <param name="path">The path from which to create this instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> contains multiple valid separators.
            -or- <paramref name="path"/> contains no valid separators.
            -or- <paramref name="path"/> represents an invalid path.</exception>
        </member>
        <member name="M:Vizistata.RelativePath.#ctor(System.String,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:RelativePath"/> class.
            </summary>
            <param name="path">The path from which to create this instance.</param>
            <param name="separator">The separator used in the path.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="separator"/> is not defined by <see cref="P:ValidSeparators"/>.
            -or- <paramref name="path"/> contains a separator other than <paramref name="separator"/>.
            -or- <paramref name="path"/> represents an invalid path.</exception>
        </member>
        <member name="M:Vizistata.RelativePath.#ctor(System.String,System.Char,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RelativePath"/> class.
            </summary>
            <param name="path">The path from which to create this instance.</param>
            <param name="separator">The separator used in the path.</param>
            <param name="removeEmptyLastNode"><c>true</c> if the last node should be removed if it is empty; otherwise, <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="separator"/> is not defined by <see cref="P:ValidSeparators"/>.
            -or- <paramref name="path"/> contains a separator other than <paramref name="separator"/>.
            -or- <paramref name="path"/> represents an invalid path.</exception>
        </member>
        <member name="M:Vizistata.RelativePath.#ctor(System.String[],System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:RelativePath"/> class.
            </summary>
            <param name="nodes">Represents the nodes of the path.</param>
            <param name="separator">The separator used in the path.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="nodes"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="separator"/> is not defined by <see cref="P:ValidSeparators"/>.
            -or- <paramref name="nodes"/> contains any element with a separator.
            -or- <paramref name="nodes"/> contains invalid pathing nodes.</exception>
        </member>
        <member name="M:Vizistata.RelativePath.#ctor(System.String[],System.Char,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RelativePath"/> class.
            </summary>
            <param name="nodes">Represents the nodes of the path.</param>
            <param name="separator">The separator used in the path.</param>
            <param name="removeEmptyLastNode"><c>true</c> if the last node should be removed if it is empty; otherwise, <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="nodes"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="separator"/> is not defined by <see cref="P:ValidSeparators"/>.
            -or- <paramref name="nodes"/> contains any element with a separator.
            -or- <paramref name="nodes"/> contains invalid pathing nodes.</exception>
        </member>
        <member name="M:Vizistata.RelativePath.#ctor(System.String[],System.Char,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RelativePath"/> class.
            </summary>
            <param name="nodes">Represents the nodes of the path.</param>
            <param name="separator">The separator used in the path.</param>
            <param name="removeEmptyLastNode"><c>true</c> if the last node should be removed if it is empty; otherwise, <c>false</c>.</param>
            <param name="skipValidation"><c>true</c> to skip argument validation; otherwise, <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="nodes"/> is a null reference and <paramref name="skipValidation"/> is <c>false</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="separator"/> is not defined by <see cref="P:ValidSeparators"/> and <paramref name="skipValidation"/> is <c>false</c>.
            -or- <paramref name="nodes"/> contains any element with a separator and <paramref name="skipValidation"/> is <c>false</c>.
            -or- <paramref name="nodes"/> contains invalid pathing nodes and <paramref name="skipValidation"/> is <c>false</c>.</exception>
        </member>
        <member name="M:Vizistata.RelativePath.Append(System.String)">
            <summary>
            Appends the path specified to this instance to create a new relative path.
            </summary>
            <param name="path">The path to append to this instance.</param>
            <returns>The new relative path created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> contains other separators not used by this instance.
            -or- <paramref name="path"/> contains invalid pathing characters or nodes.</exception>
        </member>
        <member name="M:Vizistata.RelativePath.Append(System.String,System.Boolean)">
            <summary>
            Appends the path specified to this instance to create a new relative path.
            </summary>
            <param name="path">The path to append to this instance.</param>
            <param name="normalizeSeparators"><c>true</c> if the separators should be normalized to match this instance's separators; otherwise, <c>false</c>.</param>
            <returns>The new relative path created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> contains other separators not used by this instance and <paramref name="normalizeSeparators"/> is <c>false</c>.
            -or- <paramref name="path"/> contains invalid pathing characters or nodes.</exception>
        </member>
        <member name="M:Vizistata.RelativePath.AreEqual(Vizistata.RelativePath,Vizistata.RelativePath)">
            <summary>
            Returns a value indicating if the two objects specified are equal.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the two objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.AreEqual(Vizistata.RelativePath,System.String)">
            <summary>
            Returns a value indicating if the two objects specified are equal.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the two objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.CompareTo(Vizistata.RelativePath)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A value that indicates the relative order of the objects being compared.  The return value has the following meanings.
            Less than zero: This object is less than the other parameter.
            Zero: This object is equal to other.
            Greater than zero: This object is greater than other.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.CreatePath(System.Char,System.String[])">
            <summary>
            Returns a path based on the nodes and separator specified.
            </summary>
            <param name="separator">The separator to use.</param>
            <param name="nodes">The nodes to join.</param>
            <returns>The path created.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.Equals(System.Object)">
            <summary>
            Determines whether the object specified is equal to this instance.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if the other object is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.Equals(Vizistata.RelativePath)">
            <summary>
            Determines whether the object specified is equal to this instance.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if the other object is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.Equals(System.String)">
            <summary>
            Determines whether the object specified is equal to this instance.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if the other object is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.GetHashCode">
            <summary>
            Returns a hash code value for this instance.
            </summary>
            <returns>The hash code value for this instance.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.InferSeparator(System.String,System.String,System.Boolean)">
            <summary>
            Attempts to infer the separator for a path and returns the value inferred.
            </summary>
            <param name="path">The path from which to infer the separator.</param>
            <param name="argumentName">The name of the argument being validated.</param>
            <param name="throwOnError"><c>true</c> to throw an exception if an error occurs; otherwise, <c>false</c>.</param>
            <returns>The separator for the path, or a null reference if one cannot be inferred.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> has more than one valid separator and <paramref name="throwOnError"/> is <c>true</c>.
            -or- <paramref name="path"/> has no valid separators and <paramref name="throwOnError"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Vizistata.RelativePath.IsValid(System.String)">
            <summary>
            Returns a value indicating if the node is valid.
            </summary>
            <param name="node">The node to validate.</param>
            <returns><c>true</c> if the node is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.NavigateUp">
            <summary>
            Navigates up a single node and returns the relative path from that point.
            </summary>
            <returns>The relative path from the point specified.  An empty path will be returned if the node count exceeds the number of nodes in the path.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.NavigateUp(System.Int32)">
            <summary>
            Navigates up a number of nodes and returns the relative path from that point.
            </summary>
            <param name="nodeCount">The number of nodes to move up.</param>
            <returns>The relative path from the point specified.  An empty path will be returned if the node count exceeds the number of nodes in the path.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="nodeCount"/> is less than 1.</exception>
        </member>
        <member name="M:Vizistata.RelativePath.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.ValidateNodes(System.String[],System.String,System.Boolean,System.Boolean)">
            <summary>
            Validates the nodes specified.
            </summary>
            <param name="nodes">The nodes to validate.</param>
            <param name="argumentName">The name of the argument being validated.</param>
            <param name="removeEmptyLastNode"><c>true</c> if the method should remove the last node if it is empty; otherwise, <c>false</c>.</param>
            <param name="throwOnError"><c>true</c> to throw an exception if an error occurs; otherwise, <c>false</c>.</param>
            <returns>The validated nodes, or a null reference.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="nodes"/> contains an invalid node and <paramref name="throwOnError"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Vizistata.RelativePath.op_Equality(Vizistata.RelativePath,Vizistata.RelativePath)">
            <summary>
            Returns a value indicating if the two objects specified are equal.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the two objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.op_Equality(Vizistata.RelativePath,System.String)">
            <summary>
            Returns a value indicating if the two objects specified are equal.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the two objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.op_Equality(System.String,Vizistata.RelativePath)">
            <summary>
            Returns a value indicating if the two objects specified are equal.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the two objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.op_Inequality(Vizistata.RelativePath,Vizistata.RelativePath)">
            <summary>
            Returns a value indicating if the two objects specified are not equal.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the two objects are not equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.op_Inequality(Vizistata.RelativePath,System.String)">
            <summary>
            Returns a value indicating if the two objects specified are not equal.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the two objects are not equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.op_Inequality(System.String,Vizistata.RelativePath)">
            <summary>
            Returns a value indicating if the two objects specified are not equal.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the two objects are not equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.op_LessThan(Vizistata.RelativePath,Vizistata.RelativePath)">
            <summary>
            Returns a value indicating if an object is less than another object.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the first object is less than the second object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.op_LessThanOrEqual(Vizistata.RelativePath,Vizistata.RelativePath)">
            <summary>
            Returns a value indicating if an object is less than or equal to another object.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the first object is less than or equal to the second object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.op_GreaterThan(Vizistata.RelativePath,Vizistata.RelativePath)">
            <summary>
            Returns a value indicating if an object is greater than another object.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the first object is greater than the second object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.op_GreaterThanOrEqual(Vizistata.RelativePath,Vizistata.RelativePath)">
            <summary>
            Returns a value indicating if an object is greater than or equal to another object.
            </summary>
            <param name="objA">The first object.</param>
            <param name="objB">The second object.</param>
            <returns><c>true</c> if the first object is greater than or equal to the second object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.op_Implicit(Vizistata.RelativePath)~System.String">
            <summary>
            Implicitly converts a <see cref="T:RelativePath"/> object to a <see cref="T:String"/> object.
            </summary>
            <param name="instance">The instance to convert.</param>
            <returns>The <see cref="T:String"/> that represents the converted object.</returns>
        </member>
        <member name="M:Vizistata.RelativePath.op_Explicit(System.String)~Vizistata.RelativePath">
            <summary>
            Explicitly converts a <see cref="T:String"/> object to a <see cref="T:RelativePath"/> object.
            </summary>
            <param name="instance">The instance to convert.</param>
            <returns>The <see cref="T:RelativePath"/> that represents the converted object.</returns>
            <exception cref="T:System.InvalidCastException">The object cannot be converted.</exception>
        </member>
        <member name="P:Vizistata.RelativePath.Nodes">
            <summary>
            Gets the collection of nodes in the path.
            </summary>
        </member>
        <member name="P:Vizistata.RelativePath.Separator">
            <summary>
            Gets the separator that divides the nodes in the path.
            </summary>
        </member>
        <member name="P:Vizistata.RelativePath.ValidSeparators">
            <summary>
            Gets the collection of valid separators.
            </summary>
        </member>
        <member name="T:Vizistata.PrincipalExtensions">
            <summary>
            Defines extensions methods for the types in the <see cref="N:System.Security.Principal"/> namespace.
            </summary>
        </member>
        <member name="M:Vizistata.PrincipalExtensions.IsInAllRoles(System.Security.Principal.IPrincipal,System.String[])">
            <summary>
            Gets a value indicating if the user is in all roles specified.
            </summary>
            <param name="principal">The <see cref="T:IPrincipal"/> from which this method is being called.</param>
            <param name="roles">The roles to check.</param>
            <returns><c>true</c> if the user is in each role specified; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="principal"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.PrincipalExtensions.IsInAnyRole(System.Security.Principal.IPrincipal,System.String[])">
            <summary>
            Gets a value indicating if the user is in any of the roles specified.
            </summary>
            <param name="principal">The <see cref="T:IPrincipal"/> from which this method is being called.</param>
            <param name="roles">The roles to check.</param>
            <returns><c>true</c> if the user is in any of the roles specified; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="principal"/> is a null reference.
            -or- <paramref name="roles"/> is a null reference.</exception>
        </member>
        <member name="T:Vizistata.LazyLoader`1">
            <summary>
            Lazily loads an object.  This class may not be inherited.  Instances of this class are thread-safe.
            </summary>
            <typeparam name="T">The type of object to load.</typeparam>
            <remarks>This class already exists in .NET 4.0 as System.Lazy&lt;T&gt;.</remarks>
        </member>
        <member name="F:Vizistata.LazyLoader`1._initializer">
            <summary>
            The function that will load the object.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.LazyLoader`1._isInitialized">
            <summary>
            <c>true</c> if this instance has been initialized; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="F:Vizistata.LazyLoader`1._door">
            <summary>
            Controls access to the <see cref="F:_object"/> field.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.LazyLoader`1._object">
            <summary>
            The object that is loaded.  Only access this field through the <see cref="P:Object"/> property.
            </summary>
        </member>
        <member name="M:Vizistata.LazyLoader`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LazyLoader&lt;T&gt;"/> class.
            </summary>
            <param name="initializer">The function that will load the object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="initializer"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.LazyLoader`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:LazyLoader&lt;T&gt;"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.LazyLoader`1.Dispose">
            <summary>
            Disposes any resources held by this instance.
            </summary>
        </member>
        <member name="M:Vizistata.LazyLoader`1.EnsureInitialized">
            <summary>
            Ensures that the object is loaded.
            </summary>
        </member>
        <member name="M:Vizistata.LazyLoader`1.Load">
            <summary>
            Forces this instance to load the object.  If the object is already loaded, nothing happens.
            </summary>
        </member>
        <member name="M:Vizistata.LazyLoader`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Handles the special OnSerializing event.
            </summary>
            <param name="context">Describes the source and destination of the serialization process.</param>
        </member>
        <member name="P:Vizistata.LazyLoader`1.IsInitialized">
            <summary>
            Gets a value indicating if this instance has been loaded.
            </summary>
        </member>
        <member name="P:Vizistata.LazyLoader`1.Object">
            <summary>
            Gets the object.  If the object is not already loaded, it will be loaded when this property is called.
            </summary>
        </member>
        <member name="T:Vizistata.Linq.DictionaryExtensions">
            <summary>
            Provides extension methods for the <see cref="T:IDictionary&lt;TKey,TValue&gt;"/> type.  This class may not be inherited.
            </summary>
        </member>
        <member name="M:Vizistata.Linq.DictionaryExtensions.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns a read-only version of the dictionary.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary to return as read-only.</param>
            <returns>An instance of the <see cref="T:ReadOnlyDictionary&lt;TKey,TValue&gt;"/> created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Linq.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Returns the value for the key specified or the default value for <typeparamref name="TValue"/>.
            </summary>
            <typeparam name="TKey">The type used as the key.</typeparam>
            <typeparam name="TValue">The type used as the value.</typeparam>
            <param name="dictionary">The instance on which to invoke the method.</param>
            <param name="key">Specifies the value to retrive.</param>
            <returns>The value for the key specified.  If the value doesn't exist, the default value for <typeparamref name="TValue"/> is returned instead.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is a null reference.</exception>
        </member>
        <member name="T:Vizistata.Data.DbDataReaderExtensions">
            <summary>
            Provides extension methods for the <see cref="T:IDataReader"/> interface and <see cref="T:DbDataReader"/> class.  This class may not be inherited.
            </summary>
        </member>
        <member name="M:Vizistata.Data.DbDataReaderExtensions.ReadAll(System.Data.IDataReader)">
            <summary>
            Reads all records in the data reader and returns a collection of objects from the records.
            </summary>
            <param name="dataReader">The data reader whose records will be read.</param>
            <returns>The enumerable collection of objects representing the records.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataReader"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Data.DbDataReaderExtensions.ReadAll``1(System.Data.IDataReader,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Reads all records in the data reader and returns a collection of objects from the records.
            </summary>
            <typeparam name="T">The type of object returned.</typeparam>
            <param name="dataReader">The data reader whose records will be read.</param>
            <param name="selector">The function that converts an <see cref="T:IDataRecord"/> into an object of type <typeparamref name="T"/>.</param>
            <returns>The enumerable collection of objects representing the records.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataReader"/> is a null reference.
            -or- <paramref name="selector"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Data.DbDataReaderExtensions.ReadAllCore(System.Data.IDataReader)">
            <summary>
            Reads all records in the data reader and returns a collection of objects from the records.
            </summary>
            <param name="dataReader">The data reader whose records will be read.</param>
            <returns>The enumerable collection of objects representing the records.</returns>
        </member>
        <member name="M:Vizistata.Data.DbDataReaderExtensions.ReadAllCore``1(System.Data.IDataReader,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Reads all records in the data reader and returns a collection of objects from the records.
            </summary>
            <typeparam name="T">The type of object returned.</typeparam>
            <param name="dataReader">The data reader whose records will be read.</param>
            <param name="selector">The function that converts an <see cref="T:IDataRecord"/> into an object of type <typeparamref name="T"/>.</param>
            <returns>The enumerable collection of objects representing the records.</returns>
        </member>
        <member name="T:Vizistata.UriExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Uri"/> class.  This class may not be inherited.
            </summary>
        </member>
        <member name="M:Vizistata.UriExtensions.Append(System.Uri,System.String)">
            <summary>
            Appends the path specified to the URI.
            </summary>
            <param name="instance">The URI to which to append the relative path.</param>
            <param name="relativePath">The relative path to append.</param>
            <returns>The newly created <see cref="T:Uri"/> object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="relativePath"/> is a null reference.</exception>
            <exception cref="T:System.UriFormatException">The URI constructed by adding <paramref name="relativePath"/> would result in an invalid URI.</exception>
        </member>
        <member name="M:Vizistata.UriExtensions.AppendQuery(System.Uri,System.String,System.String)">
            <summary>
            Appends the query information specified to a URI.
            </summary>
            <param name="instance">The URI to which to append the query information.</param>
            <param name="key">The key to add.</param>
            <param name="value">The value for the key to add.</param>
            <returns>The new URI created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="key"/> is a null reference.
            -or- <paramref name="value"/> is a null reference.</exception>
            <exception cref="T:System.UriFormatException">The URI constructed by adding <paramref name="key"/> and <paramref name="value"/> would result in an invalid URI.</exception>
            <exception cref="T:Vizistata.Collections.DuplicateKeyException"><paramref name="key"/> already exists in the query.</exception>
        </member>
        <member name="M:Vizistata.UriExtensions.AppendQuery(System.Uri,System.String,System.String,System.Boolean)">
            <summary>
            Appends the query information specified to a URI.
            </summary>
            <param name="instance">The URI to which to append the query information.</param>
            <param name="key">The key to add.</param>
            <param name="value">The value for the key to add.</param>
            <param name="overwrite"><c>true</c> if an existing value should be overwritten in the event that <paramref name="key"/> already exists; otherwise, <c>false</c>.</param>
            <returns>The new URI created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="key"/> is a null reference.
            -or- <paramref name="value"/> is a null reference.</exception>
            <exception cref="T:System.UriFormatException">The URI constructed by adding <paramref name="key"/> and <paramref name="value"/> would result in an invalid URI.</exception>
            <exception cref="T:Vizistata.Collections.DuplicateKeyException"><paramref name="key"/> already exists in the query and <paramref name="overwrite"/> is <c>false</c>.</exception>
        </member>
        <member name="M:Vizistata.UriExtensions.ContainsQueryKey(System.Uri,System.String)">
            <summary>
            Returns a value indicating if the URI contains the key specified in the query information.
            </summary>
            <param name="instance">The URI to check.</param>
            <param name="key">The key for which to check.</param>
            <returns><c>true</c> if the key is contained; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="key"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.UriExtensions.CreateQuery(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates and returns query information for the query dictionary specified.
            </summary>
            <param name="queryDictionary">Contains query information.</param>
            <returns>The query string created.</returns>
        </member>
        <member name="M:Vizistata.UriExtensions.CreateQueryDictionary(System.String)">
            <summary>
            Creates and returns a dictionary representing the query information supplied.
            </summary>
            <param name="query">The query string to parse.</param>
            <returns>A dictionary containing the keys and values in the query string.</returns>
        </member>
        <member name="M:Vizistata.UriExtensions.RemoveQuery(System.Uri,System.String)">
            <summary>
            Removes the key specified from the query string if it exists.
            </summary>
            <param name="instance">The URI to which to append the relative path.</param>
            <param name="key">The key to remove.</param>
            <returns>The <see cref="T:Uri"/> created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="key"/> is a null reference.</exception>
        </member>
        <member name="T:Vizistata.Data.DataRecord">
            <summary>
            Represents a data record object.  This class may not be inherited.
            </summary>
        </member>
        <member name="F:Vizistata.Data.DataRecord._columnInfos">
            <summary>
            Describes the columns in this instance.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Data.DataRecord._values">
            <summary>
            The values in this instance.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.Data.DataRecord.#ctor(Vizistata.Data.ColumnInfo[],System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:DataRecord"/> class.
            </summary>
            <param name="columnInfos">Describes the columns in this instance.</param>
            <param name="values">The values for this instance.</param>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetBoolean(System.Int32)">
            <summary>
            Returns the value of the specified column as a <see cref="T:Boolean"/>.
            </summary>
            <param name="i">The column ordinal.</param>
            <returns>The value of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The value is not of type <see cref="T:Boolean"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetByte(System.Int32)">
            <summary>
            Returns the value of the specified column as a <see cref="T:Byte"/>.
            </summary>
            <param name="i">The column ordinal.</param>
            <returns>The value of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The value is not of type <see cref="T:Byte"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns the value of the specified column as a byte array.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="dataIndex">The index within the field from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferIndex">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The value of the specified column.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is greater than 2,147,483,647.
            -or- <paramref name="dataIndex"/> is less than 0.
            -or- <paramref name="dataIndex"/> is greater than or equal to the length of the array referenced by <paramref name="i"/>.
            -or- <paramref name="bufferIndex"/> is less than 0.
            -or- <paramref name="bufferIndex"/> is greater than or equal to the length of <paramref name="buffer"/>.
            -or- <paramref name="length"/> is less than 0.
            -or- The combined value of the length of the byte array referenced by <paramref name="i"/> and <paramref name="bufferIndex"/> is greater than the length of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.InvalidCastException">The value is not an array of <see cref="T:Byte"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetChar(System.Int32)">
            <summary>
            Returns the value of the specified column as a <see cref="T:Char"/>.
            </summary>
            <param name="i">The column ordinal.</param>
            <returns>The value of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The value is not of type <see cref="T:Char"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Returns the value of the specified column as a character array.
            </summary>
            <param name="i">Column ordinal.</param>
            <param name="dataIndex">Buffer to copy data into.</param>
            <param name="buffer">Maximum length to copy into the buffer.</param>
            <param name="bufferIndex">Point to start from within the buffer.</param>
            <param name="length">Point to start from within the source data.</param>
            <returns>The value of the specified column.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is greater than 2,147,483,647.
            -or- <paramref name="dataIndex"/> is less than 0.
            -or- <paramref name="dataIndex"/> is greater than or equal to the length of the array referenced by <paramref name="i"/>.
            -or- <paramref name="bufferIndex"/> is less than 0.
            -or- <paramref name="bufferIndex"/> is greater than or equal to the length of <paramref name="buffer"/>.
            -or- <paramref name="length"/> is less than 0.
            -or- The combined value of the length of the byte array referenced by <paramref name="i"/> and <paramref name="bufferIndex"/> is greater than the length of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.InvalidCastException">The value is not an array of <see cref="T:Char"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetDataTypeName(System.Int32)">
            <summary>
            Returns the name of the back-end data type.
            </summary>
            <param name="i">The column ordinal.</param>
            <returns>The name of the back-end data type.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetDateTime(System.Int32)">
            <summary>
            Returns the value of the specified column as a <see cref="T:DateTime"/>.
            </summary>
            <param name="i">The column ordinal.</param>
            <returns>The value of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The value is not of type <see cref="T:DateTime"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetDecimal(System.Int32)">
            <summary>
            Returns the value of the specified column as a <see cref="T:Decimal"/>.
            </summary>
            <param name="i">The column ordinal.</param>
            <returns>The value of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The value is not of type <see cref="T:Decimal"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetDouble(System.Int32)">
            <summary>
            Returns the value of the specified column as a <see cref="T:Double"/>.
            </summary>
            <param name="i">The column ordinal.</param>
            <returns>The value of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The value is not of type <see cref="T:Double"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetFieldType(System.Int32)">
            <summary>
            Returns the <see cref="T:Type"/> that is the data type of the object.
            </summary>
            <param name="i">The column ordinal.</param>
            <returns>The <see cref="T:Type"/> that is the data type of the object.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetFloat(System.Int32)">
            <summary>
            Returns the value of the specified column as a <see cref="T:Single"/>.
            </summary>
            <param name="i">The column ordinal.</param>
            <returns>The value of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The value is not of type <see cref="T:Single"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetGuid(System.Int32)">
            <summary>
            Returns the value of the specified column as a <see cref="T:Guid"/>.
            </summary>
            <param name="i">The column ordinal.</param>
            <returns>The value of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The value is not of type <see cref="T:Guid"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetInt16(System.Int32)">
            <summary>
            Returns the value of the specified column as a <see cref="T:Int16"/>.
            </summary>
            <param name="i">The column ordinal.</param>
            <returns>The value of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The value is not of type <see cref="T:Int16"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetInt32(System.Int32)">
            <summary>
            Returns the value of the specified column as a <see cref="T:Int32"/>.
            </summary>
            <param name="i">The column ordinal.</param>
            <returns>The value of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The value is not of type <see cref="T:Int32"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetInt64(System.Int32)">
            <summary>
            Returns the value of the specified column as a <see cref="T:Int64"/>.
            </summary>
            <param name="i">The column ordinal.</param>
            <returns>The value of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The value is not of type <see cref="T:Int64"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetName(System.Int32)">
            <summary>
            Returns the name of the specified column.
            </summary>
            <param name="i">The column ordinal.</param>
            <returns>The name of the specified column.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetOrdinal(System.String)">
            <summary>
            Returns the column ordinal, given the name of the column.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The column ordinal.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a null reference.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="name"/> is not in this instance.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetString(System.Int32)">
            <summary>
            Returns the value of the specified column as a <see cref="T:String"/>.
            </summary>
            <param name="i">The column ordinal.</param>
            <returns>The value of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The value is not of type <see cref="T:String"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetValue(System.Int32)">
            <summary>
            Returns the value of the specified column.
            </summary>
            <param name="i">The column ordinal.</param>
            <returns>The value of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.GetValues(System.Object[])">
            <summary>
            Populates an array of objects with the column values of the current record.
            </summary>
            <param name="values">An array to copy the attribute fields into.</param>
            <returns>The number of instances of values copied into the array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Data.DataRecord.IsDBNull(System.Int32)">
            <summary>
            Used to indicate nonexistent values.
            </summary>
            <param name="i">The column ordinal.</param>
            <returns><c>true</c> if the specified column is equivalent to System.DBNull; otherwise <c>false</c>.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
        </member>
        <member name="P:Vizistata.Data.DataRecord.Item(System.Int32)">
            <summary>
            Gets the value at the specified column in its native format given the column ordinal.
            </summary>
            <param name="i">The column ordinal.</param>
            <returns>The value at the specified column in its native format.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="i"/> is less than 0.
            -or- <paramref name="i"/> is greater than or equal to <see cref="P:IDataRecord.FieldCount"/>.</exception>
        </member>
        <member name="P:Vizistata.Data.DataRecord.Item(System.String)">
            <summary>
            Gets the value at the specified column in its native format given the column name.
            </summary>
            <param name="name">The column name.</param>
            <returns>The value at the specified column in its native format.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a null reference.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="name"/> is not in this instance.</exception>
        </member>
        <member name="P:Vizistata.Data.DataRecord.FieldCount">
            <summary>
            Gets the number of fields within the current record.
            </summary>
        </member>
        <member name="T:Vizistata.Int32Extensions">
            <summary>
            Provides extension methods for the <see cref="T:Int32"/> struct.  This class may not be inherited.
            </summary>
        </member>
        <member name="M:Vizistata.Int32Extensions.FormatCurrentCulture(System.Int32)">
            <summary>
            Returns the string representation of a number using the current culture as a format provider.
            </summary>
            <param name="value">The value whose string representation should be returned.</param>
            <returns>The string representation of the number.</returns>
        </member>
        <member name="M:Vizistata.Int32Extensions.FormatCurrentCulture(System.Int32,System.String)">
            <summary>
            Returns the string representation of a number using the current culture as a format provider.
            </summary>
            <param name="value">The value whose string representation should be returned.</param>
            <param name="format">The string format to use.</param>
            <returns>The string representation of the number.</returns>
        </member>
        <member name="M:Vizistata.Int32Extensions.FormatCurrentCulture(System.Nullable{System.Int32})">
            <summary>
            Returns the string representation of a number using the current culture as a format provider.
            </summary>
            <param name="value">The value whose string representation should be returned.</param>
            <returns>The string representation of the number.</returns>
        </member>
        <member name="M:Vizistata.Int32Extensions.FormatCurrentCulture(System.Nullable{System.Int32},System.String)">
            <summary>
            Returns the string representation of a number using the current culture as a format provider.
            </summary>
            <param name="value">The value whose string representation should be returned.</param>
            <param name="format">The string format to use.</param>
            <returns>The string representation of the number.</returns>
        </member>
        <member name="M:Vizistata.Int32Extensions.FormatInvariant(System.Int32)">
            <summary>
            Returns the string representation of a number using the invariant culture as a format provider.
            </summary>
            <param name="value">The value whose string representation should be returned.</param>
            <returns>The string representation of the number.</returns>
        </member>
        <member name="M:Vizistata.Int32Extensions.FormatInvariant(System.Int32,System.String)">
            <summary>
            Returns the string representation of a number using the invariant culture as a format provider.
            </summary>
            <param name="value">The value whose string representation should be returned.</param>
            <param name="format">The string format to use.</param>
            <returns>The string representation of the number.</returns>
        </member>
        <member name="M:Vizistata.Int32Extensions.FormatInvariant(System.Nullable{System.Int32})">
            <summary>
            Returns the string representation of a number using the invariant culture as a format provider.
            </summary>
            <param name="value">The value whose string representation should be returned.</param>
            <returns>The string representation of the number.</returns>
        </member>
        <member name="M:Vizistata.Int32Extensions.FormatInvariant(System.Nullable{System.Int32},System.String)">
            <summary>
            Returns the string representation of a number using the invariant culture as a format provider.
            </summary>
            <param name="value">The value whose string representation should be returned.</param>
            <param name="format">The string format to use.</param>
            <returns>The string representation of the number.</returns>
        </member>
        <member name="T:Vizistata.Data.DbConnectionExtensions">
            <summary>
            Provides extension methods for the <see cref="T:IDbConnection"/> interface and <see cref="T:DbConnection"/> class.  This class may not be inherited.
            </summary>
        </member>
        <member name="M:Vizistata.Data.DbConnectionExtensions.CreateCommand(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Creates and returns a new database command object.
            </summary>
            <param name="connection">The connection that will create and own the command.</param>
            <param name="commandType">The type of command.</param>
            <param name="commandText">The text or name of the stored procedure for the command.</param>
            <returns>A reference to the <see cref="T:IDbCommand"/> object created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="connection"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Data.DbConnectionExtensions.CreateCommand(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbTransaction)">
            <summary>
            Creates and returns a new database command object.
            </summary>
            <param name="connection">The connection that will create and own the command.</param>
            <param name="commandType">The type of command.</param>
            <param name="commandText">The text or name of the stored procedure for the command.</param>
            <param name="transaction">The database transaction that has been enlisted, or a null reference if the command is not part of a transaction.</param>
            <returns>A reference to the <see cref="T:IDbCommand"/> object created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="connection"/> is a null reference.</exception>
        </member>
        <member name="T:Vizistata.PhoneNumber">
            <summary>
            Represents a phone number in the United States.  This class may not be inherited.  This class is immutable.
            </summary>
            <remarks>
            See the "E.123" entry at Wikipedia (http://en.wikipedia.org/wiki/E.123) for information on business rules.
            </remarks>
        </member>
        <member name="F:Vizistata.PhoneNumber._countryCode">
            <summary>
            The country code for this phone number.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.PhoneNumber._areaCode">
            <summary>
            The area code for this phone number.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.PhoneNumber._subscriberNumberGroups">
            <summary>
            The subscriber number groups for this phone number.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.PhoneNumber.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:PhoneNumber"/> class.
            </summary>
            <param name="countryCode">A string containing only numbers representing the country code.  For example, 1 in the United States or 41 in Switzerland.</param>
            <param name="areaCode">A string containing numbers and/or letters representing the area code.</param>
            <param name="subscriberNumberGroups">The array of strings containing numbers and/or letters which represent the groupings of digits for the subscriber number.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="countryCode"/> is a null reference.
            -or- <paramref name="areaCode"/> is a null reference.
            -or- <paramref name="subscriberNumberGroups"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="countryCode"/> is empty.
            -or- <paramref name="countryCode"/> is not a valid country code.
            -or- <paramref name="countryCode"/> contains non-numeric characters.
            -or- <paramref name="areaCode"/> is empty or contains non-alphanumeric characters.
            -or- <paramref name="subscriberNumberGroups"/> is empty.
            -or- <paramref name="subscriberNumberGroups"/> contains en element that is a null reference.
            -or- <paramref name="subscriberNumberGroups"/> contains en element which has non-alphanumeric characters.</exception>
            <exception cref="T:System.NotSupportedException">The country code is valid but is not supported.  Currently, only US phone numbers are supported.</exception>
        </member>
        <member name="M:Vizistata.PhoneNumber.AreEqual(Vizistata.PhoneNumber,Vizistata.PhoneNumber)">
            <summary>
            Returns a value indicating if the two objects are equal.
            </summary>
            <param name="objA">The first <see cref="T:PhoneNumber"/> to compare.</param>
            <param name="objB">The second <see cref="T:PhoneNumber"/> to compare.</param>
            <returns><c>true</c> if <paramref name="objA"/> equals <paramref name="objB"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.PhoneNumber.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Object"/> is equal to the current <see cref="T:PhoneNumber"/>.
            </summary>
            <param name="obj">The <see cref="T:Object"/> to compare with the current <see cref="T:PhoneNumber"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Object"/> is equal to the current <see cref="T:PhoneNumber"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.PhoneNumber.Equals(Vizistata.PhoneNumber)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.PhoneNumber.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:Object.GetHashCode"/> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:PhoneNumber"/>.</returns>
        </member>
        <member name="M:Vizistata.PhoneNumber.Parse(System.String)">
            <summary>
            Converts the String representation of a phone number to its <see cref="T:PhoneNumber"/> equivalent.
            </summary>
            <param name="value">The String representation of the phone number to convert.</param>
            <returns>The <see cref="T:PhoneNumber"/> equivalent to the phone number contained in <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference.</exception>
            <exception cref="T:System.FormatException"><paramref name="value"/> is not in the correct format.</exception>
        </member>
        <member name="M:Vizistata.PhoneNumber.Parse(System.String,System.Boolean)">
            <summary>
            Converts the String representation of a phone number to its <see cref="T:PhoneNumber"/> equivalent.
            </summary>
            <param name="value">The String representation of the phone number to convert.</param>
            <param name="throwOnError"><c>true</c> to throw an exception on error; otherwise, <c>false</c>.</param>
            <returns>The <see cref="T:PhoneNumber"/> equivalent to the phone number contained in <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference and <paramref name="throwOnError"/> is <c>true</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="value"/> is not in the correct format and <paramref name="throwOnError"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Vizistata.PhoneNumber.ToString">
            <summary>
            Returns a <see cref="T:String"/> that represents the current <see cref="T:PhoneNumber"/>.
            </summary>
            <returns>A <see cref="T:String"/> that represents the current <see cref="T:PhoneNumber"/>.</returns>
        </member>
        <member name="M:Vizistata.PhoneNumber.TryParse(System.String,Vizistata.PhoneNumber@)">
            <summary>
            Converts the String representation of a phone number to its <see cref="T:PhoneNumber"/> equivalent.  A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">The String representation of the phone number to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:PhoneNumber"/> that is equivalent to the phone numeric value contained in <paramref name="value"/>, if the conversion succeeded, or a null reference if the conversion failed.  The conversion fails if the <paramref name="value"/> parameter is a null reference or is not a phone number in a valid format.  This parameter is passed uninitialized.</param>
            <returns><c>true</c> if <paramref name="value"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.PhoneNumber.op_Equality(Vizistata.PhoneNumber,Vizistata.PhoneNumber)">
            <summary>
            Determines whether two instances of the <see cref="T:PhoneNumber"/> class are equal.
            </summary>
            <param name="objA">The first <see cref="T:PhoneNumber"/> to compare.</param>
            <param name="objB">The second <see cref="T:PhoneNumber"/> to compare.</param>
            <returns><c>true</c> if <paramref name="objA"/> equals <paramref name="objB"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.PhoneNumber.op_Inequality(Vizistata.PhoneNumber,Vizistata.PhoneNumber)">
            <summary>
            Determines whether two instances of the <see cref="T:PhoneNumber"/> class are not equal.
            </summary>
            <param name="objA">The first <see cref="T:PhoneNumber"/> to compare.</param>
            <param name="objB">The second <see cref="T:PhoneNumber"/> to compare.</param>
            <returns><c>true</c> if <paramref name="objA"/> does not equal <paramref name="objB"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.PhoneNumber.op_Implicit(Vizistata.PhoneNumber)~System.String">
            <summary>
            Implicitly converts a <see cref="T:PhoneNumber"/> value to a <see cref="T:String"/> value.
            </summary>
            <param name="instance">The object to convert.</param>
            <returns>The <see cref="T:String"/> representation of <paramref name="instance"/>.</returns>
        </member>
        <member name="M:Vizistata.PhoneNumber.op_Explicit(System.String)~Vizistata.PhoneNumber">
            <summary>
            Explicitly converts a <see cref="T:String"/> value to a <see cref="T:PhoneNumber"/> value.
            </summary>
            <param name="instance">The object to convert.</param>
            <returns>The <see cref="T:PhoneNumber"/> representation of <paramref name="instance"/>.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="instance"/> cannot be converted to a <see cref="T:PhoneNumber"/> object.</exception>
        </member>
        <member name="P:Vizistata.PhoneNumber.AreaCode">
            <summary>
            Gets the area code for the phone number.
            </summary>
        </member>
        <member name="P:Vizistata.PhoneNumber.CountryCode">
            <summary>
            Gets the country code part of the phone number.
            </summary>
        </member>
        <member name="P:Vizistata.PhoneNumber.SubscriberNumberGroups">
            <summary>
            Gets the subcriber or local part of the phone number divided into any logical groups.
            </summary>
        </member>
        <member name="T:Vizistata.ExceptionExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Exception"/> class.  This class may not be inherited.
            </summary>
        </member>
        <member name="F:Vizistata.ExceptionExtensions._criticalExceptionTypes">
            <summary>
            The list of critical exception types which cannot be handled safely.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.ExceptionExtensions.CanBeHandledSafely(System.Exception)">
            <summary>
            Returns a value indicating if the exception can be handled safely within an application.
            </summary>
            <param name="instance">The exception to check.</param>
            <returns><c>true</c> if the exception can be handled safely; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.ExceptionExtensions.ExtractMessages(System.Exception)">
            <summary>
            Flattens the list of exceptions and returns the message for each.
            </summary>
            <param name="exception">The exception from which to extract the messages.</param>
            <returns>The enumerable collection of messages.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.ExceptionExtensions.WalkExceptions(System.Exception)">
            <summary>
            Walks an exception tree returning the exception and any inner exceptions in the object.
            </summary>
            <param name="exception">The exception to walk.</param>
            <returns>The enumerable collection of exceptions.</returns>
        </member>
        <member name="T:Vizistata.Diagnostics.PerformanceLoggingScope">
            <summary>
            Logs the performance of a particular scope.  This class may not be inherited.
            </summary>
        </member>
        <member name="F:Vizistata.Diagnostics.PerformanceLoggingScope._eventType">
            <summary>
            The type of event.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Diagnostics.PerformanceLoggingScope._isDisposed">
            <summary>
            <c>true</c> if this instance has been disposed; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="F:Vizistata.Diagnostics.PerformanceLoggingScope._name">
            <summary>
            The name of the scope.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Diagnostics.PerformanceLoggingScope._source">
            <summary>
            The source of the scope.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Diagnostics.PerformanceLoggingScope._start">
            <summary>
            The start time of the scope.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.Diagnostics.PerformanceLoggingScope.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PerformanceLoggingScope"/> class.
            </summary>
            <param name="source">The source of the scope.  This is the object (or type) to which the name of the scope belongs.</param>
            <param name="name">The name of the scope.  This is usually the property or method name.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is a null reference.
            -or- <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.PerformanceLoggingScope.#ctor(System.Object,System.String,System.Diagnostics.TraceEventType)">
            <summary>
            Initializes a new instance of the <see cref="T:PerformanceLoggingScope"/> class.
            </summary>
            <param name="source">The source of the scope.  This is the object (or type) to which the name of the scope belongs.</param>
            <param name="name">The name of the scope.  This is usually the property or method name.</param>
            <param name="eventType">The type of event type to log.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is a null reference.
            -or- <paramref name="name"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventType"/> is not defined by <see cref="T:TraceEventType"/>.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.PerformanceLoggingScope.Dispose">
            <summary>
            Disposes of any resources held by this instance.
            </summary>
        </member>
        <member name="M:Vizistata.Diagnostics.PerformanceLoggingScope.WriteFinish">
            <summary>
            Writes the finish log event.
            </summary>
        </member>
        <member name="M:Vizistata.Diagnostics.PerformanceLoggingScope.WriteStart">
            <summary>
            Writes the start log event.
            </summary>
        </member>
        <member name="T:Vizistata.DateTimeFormat">
            <summary>
            Represents the well-known formats for <see cref="T:DateTime"/> objects.  This class may not be inherited.  Instances of this class are immutable.
            </summary>
        </member>
        <member name="F:Vizistata.DateTimeFormat._allFormats">
            <summary>
            Represents all known formats.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.DateTimeFormat._formatString">
            <summary>
            The format string represented by this instance.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.DateTimeFormat._name">
            <summary>
            The name of the format.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.DateTimeFormat.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DateTimeFormat"/> class.
            </summary>
            <param name="name">The name of the format.</param>
            <param name="formatString">The format string represented by this instance.</param>
        </member>
        <member name="M:Vizistata.DateTimeFormat.Equals(System.Object)">
            <summary>
            Returns a value indicating if this instance is equivalent to the object specified.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equivalent to the object specified; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.DateTimeFormat.Equals(Vizistata.DateTimeFormat)">
            <summary>
            Returns a value indicating if this instance is equivalent to the object specified.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equivalent to the object specified; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.DateTimeFormat.Equals(System.String)">
            <summary>
            Returns a value indicating if this instance is equivalent to the object specified.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equivalent to the object specified; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.DateTimeFormat.GetHashCode">
            <summary>
            Returns a value that can be used as a hash code for this instance.
            </summary>
            <returns>A value that can be used as a hash code for this instance.</returns>
        </member>
        <member name="M:Vizistata.DateTimeFormat.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:Vizistata.DateTimeFormat.op_Implicit(Vizistata.DateTimeFormat)~System.String">
            <summary>
            Implicitly converts an object of type <see cref="T:DateTimeFormat"/> to an object of type <see cref="T:String"/>
            </summary>
            <param name="dateTimeFormat">The object to convert.</param>
            <returns>The converted value of the object.</returns>
        </member>
        <member name="M:Vizistata.DateTimeFormat.op_Explicit(System.String)~Vizistata.DateTimeFormat">
            <summary>
            Explicitly converts an object of type <see cref="T:String"/> to an object of type <see cref="T:DateTimeFormat"/>
            </summary>
            <param name="format">The object to convert.</param>
            <returns>The converted value of the object.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="format"/> is not a valid format for formatting <see cref="T:DateTime"/> objects.</exception>
        </member>
        <member name="P:Vizistata.DateTimeFormat.FormatString">
            <summary>
            Gets the format string represented by this instance.
            </summary>
        </member>
        <member name="P:Vizistata.DateTimeFormat.General">
            <summary>
            Gets the generic date/time format.  This is the equivalent of not specifying a format.
            </summary>
        </member>
        <member name="P:Vizistata.DateTimeFormat.LongDate">
            <summary>
            Gets the long date format, equivalent to "D".
            </summary>
        </member>
        <member name="P:Vizistata.DateTimeFormat.LongDateLongTime">
            <summary>
            Gets the long date + long time format, equivalent to "F".
            </summary>
        </member>
        <member name="P:Vizistata.DateTimeFormat.LongDateShortTime">
            <summary>
            Gets the long date + short time format, equivalent to "f".
            </summary>
        </member>
        <member name="P:Vizistata.DateTimeFormat.LongTime">
            <summary>
            Gets the long time format, equivalent to "T".
            </summary>
        </member>
        <member name="P:Vizistata.DateTimeFormat.MonthDay">
            <summary>
            Gets the month/day format, equivalent to "m" or "M".
            </summary>
        </member>
        <member name="P:Vizistata.DateTimeFormat.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="P:Vizistata.DateTimeFormat.Rfc1123">
            <summary>
            Gets the RFC1123 format, equivalent to "r" or "R".
            </summary>
        </member>
        <member name="P:Vizistata.DateTimeFormat.ShortDate">
            <summary>
            Gets the short date format, equivalent to "d".
            </summary>
        </member>
        <member name="P:Vizistata.DateTimeFormat.ShortDateLongTime">
            <summary>
            Gets the short date + long time format, equivalent to "G".
            </summary>
        </member>
        <member name="P:Vizistata.DateTimeFormat.ShortDateShortTime">
            <summary>
            Gets the short date + short time format, equivalent to "g".
            </summary>
        </member>
        <member name="P:Vizistata.DateTimeFormat.ShortTime">
            <summary>
            Gets the short time format, equivalent to "t".
            </summary>
        </member>
        <member name="P:Vizistata.DateTimeFormat.SortableDateTime">
            <summary>
            Gets the sortable date/time format, equivalent to "s".
            </summary>
        </member>
        <member name="P:Vizistata.DateTimeFormat.UniversalSortableDateTime">
            <summary>
            Gets the universal sortable date/time format, equivalent to "u".
            </summary>
        </member>
        <member name="P:Vizistata.DateTimeFormat.YearMonth">
            <summary>
            Gets the year/month format, equivalent to "y" or "Y".
            </summary>
        </member>
        <member name="T:Vizistata.Reflection.TypeExtensions">
            <summary>
            Provides reflection-based extension methods for the <see cref="T:Type"/> class.  This class may not be inherited.
            </summary>
        </member>
        <member name="M:Vizistata.Reflection.TypeExtensions.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates and returns an instance of the type specified.
            </summary>
            <param name="type">The type to create.</param>
            <param name="args">The array of arguments to supply to the constructor.</param>
            <returns>The instance created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is a null reference.</exception>
            <exception cref="T:System.MissingMemberException">A constructor matching the types specified could not be found.</exception>
        </member>
        <member name="M:Vizistata.Reflection.TypeExtensions.CreateInstance(System.Type,System.Type[],System.Object[])">
            <summary>
            Creates and returns an instance of the type specified.
            </summary>
            <param name="type">The type to create.</param>
            <param name="argTypes">The array of types accepted in the constructor.</param>
            <param name="args">The array of arguments to supply to the constructor.</param>
            <returns>The instance created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">The length of <paramref name="args"/> does not match the length of <paramref name="argTypes"/>.</exception>
            <exception cref="T:System.MissingMemberException">A constructor matching the types specified could not be found.</exception>
        </member>
        <member name="M:Vizistata.Reflection.TypeExtensions.FindField(System.Type,System.String,System.Boolean)">
            <summary>
            Finds a field on the type specified.  Base types are also checked.
            </summary>
            <param name="type">The type on which to find the field.</param>
            <param name="name">The name of the field.</param>
            <param name="isStatic"><c>true</c> if the field is static; otherwise, <c>false</c>.</param>
            <returns>The field found, or a null reference if it is not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is a null reference.
            -or- <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Reflection.TypeExtensions.FindNestedType(System.Type,System.String)">
            <summary>
            Finds the nested type specified.
            </summary>
            <param name="type">The type on which to search.</param>
            <param name="name">The name of the nested type.</param>
            <returns>The type found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is a null reference.
            -or- <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Reflection.TypeExtensions.FindProperty(System.Type,System.String,System.Boolean)">
            <summary>
            Finds a property on the type specified.  Base types are also checked.
            </summary>
            <param name="type">The type on which to find the property.</param>
            <param name="name">The name of the property.</param>
            <param name="isStatic"><c>true</c> if the property is static; otherwise, <c>false</c>.</param>
            <returns>The property found, or a null reference if it is not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is a null reference.
            -or- <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="T:Vizistata.Reflection.DisposableExtensions">
            <summary>
            Provides extensions methods for the <see cref="T:IDisposable"/> interface.  This class may not be inherited.
            </summary>
        </member>
        <member name="F:Vizistata.Reflection.DisposableExtensions.AllInstanceMembers">
            <summary>
            Represents all instance members = Instance | Public | NonPublic.
            </summary>
        </member>
        <member name="M:Vizistata.Reflection.DisposableExtensions.Dispose(System.IDisposable,System.Boolean)">
            <summary>
            Assists in disposing or finalizing instances of objects.
            </summary>
            <param name="disposable">The instance to dispose.</param>
            <param name="isDisposing"><c>true</c> if called from the <see cref="M:IDisposable.Dispose"/> method; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Vizistata.Reflection.DisposableExtensions.InvokeDispose(System.IDisposable)">
            <summary>
            Assists in disposing an instance of a class without requiring a full implementation.  Only call this method from the Dispose() method.
            </summary>
            <param name="disposable">The instance whose fields should be disposed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="disposable"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Reflection.DisposableExtensions.InvokeFinalize(System.IDisposable)">
            <summary>
            Assists in finalizing an instance of a class without requiring a full implementation.  Only call this method from the Finalize() method.
            </summary>
            <param name="disposable">The instance whose fields should be disposed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="disposable"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Reflection.DisposableExtensions.ReleaseManagedResources(System.Object,System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo})">
            <summary>
            Assists in releasing any managed resources from the fields specified.
            </summary>
            <param name="disposable">The instance whose fields should be disposed.</param>
            <param name="fields">The enumerable collection of fields to dispose.</param>
        </member>
        <member name="M:Vizistata.Reflection.DisposableExtensions.ReleaseUnmanagedResources(System.Object,System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo})">
            <summary>
            Assists in releasing any unmanaged resources from the fields specified.
            </summary>
            <param name="disposable">The instance whose fields should be disposed.</param>
            <param name="fields">The enumerable collection of fields to dispose.</param>
        </member>
        <member name="T:Vizistata.EmailAddress">
            <summary>
            Represents an e-mail address.  This class may not be inherited.  This class is immutable.
            </summary>
            <remarks>
            See the "E-mail address" entry at Wikipedia (http://en.wikipedia.org/wiki/E-mail_address) for information on business rules.
            </remarks>
        </member>
        <member name="F:Vizistata.EmailAddress._domain">
            <summary>
            The domain part of the e-mail address.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.EmailAddress._localPart">
            <summary>
            The local part of the e-mail address.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.EmailAddress.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EmailAddress"/> class.
            </summary>
            <param name="localPart">The local part of the e-mail address (the part before the @ symbol).</param>
            <param name="domain">The host name of the e-mail address (the part after the @ symbol).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="localPart"/> is a null reference.
            -or- <paramref name="domain"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="localPart"/> has a length of 0 characters.
            -or- <paramref name="localPart"/> as a length greater than 64 characters.
            -or- <paramref name="domain"/> has a length of 0 characters.
            -or- <paramref name="domain"/> has a length greater than 253 characters.
            -or- The combined length of <paramref name="localPart"/> and <paramref name="domain"/> is greater than 254 characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="localPart"/> contains characters not defined by <see cref="M:GetValidLocalPartCharacters"/>.
            -or- <paramref name="localPart"/> starts with the period character ('.').
            -or- <paramref name="localPart"/> ends with the period character ('.').
            -or- <paramref name="domain"/> contains characters not defined by <see cref="M:GetValidDomainCharacters"/>.
            -or- <paramref name="domain"/> starts with the period character ('.').
            -or- <paramref name="domain"/> ends with the period character ('.').</exception>
        </member>
        <member name="M:Vizistata.EmailAddress.AreEqual(Vizistata.EmailAddress,Vizistata.EmailAddress)">
            <summary>
            Gets a value indicating if the two objects are equal.
            </summary>
            <param name="objA">The first <see cref="T:EmailAddress"/> to compare.</param>
            <param name="objB">The second <see cref="T:EmailAddress"/> to compare.</param>
            <returns><c>true</c> if <paramref name="objA"/> equals <paramref name="objB"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.EmailAddress.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Object"/> is equal to the current <see cref="T:EmailAddress"/>.
            </summary>
            <param name="obj">The <see cref="T:Object"/> to compare with the current <see cref="T:EmailAddress"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Object"/> is equal to the current <see cref="T:EmailAddress"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.EmailAddress.Equals(Vizistata.EmailAddress)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.EmailAddress.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:Object.GetHashCode"/> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:EmailAddress"/>.</returns>
        </member>
        <member name="M:Vizistata.EmailAddress.GetValidDomainCharacters">
            <summary>
            Returns the array of valid characters for a domain name.
            </summary>
            <returns>The array of characters that are valid for a domain name.</returns>
        </member>
        <member name="M:Vizistata.EmailAddress.GetValidLocalPartCharacters">
            <summary>
            Returns the array of valid characters for the local part of an e-mail address.
            </summary>
            <returns>The array of characters that are valid for the local part of an e-mail address.</returns>
        </member>
        <member name="M:Vizistata.EmailAddress.Parse(System.String)">
            <summary>
            Converts the String representation of an e-mail address to its <see cref="T:EmailAddress"/> equivalent.
            </summary>
            <param name="s">The <see cref="T:String"/> representation of an e-mail address to convert.</param>
            <returns>The <see cref="T:EmailAddress"/> equivalent to the value contained in <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is a null reference.</exception>
            <exception cref="T:System.FormatException"><paramref name="s"/> is not in the correct format.</exception>
        </member>
        <member name="M:Vizistata.EmailAddress.Parse(System.String,System.Boolean)">
            <summary>
            Converts the String representation of an e-mail address to its <see cref="T:EmailAddress"/> equivalent.
            </summary>
            <param name="s">The <see cref="T:String"/> representation of an e-mail address to convert.</param>
            <param name="throwOnError"><c>true</c> to throw an exception on error; otherwise, <c>false</c>.</param>
            <returns>The <see cref="T:EmailAddress"/> equivalent to the value contained in <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is a null reference and <paramref name="throwOnError"/> is <c>true</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="s"/> is not in the correct format and <paramref name="throwOnError"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Vizistata.EmailAddress.ToString">
            <summary>
            Returns a <see cref="T:String"/> that represents the current <see cref="T:EmailAddress"/>.
            </summary>
            <returns>A <see cref="T:String"/> that represents the current <see cref="T:EmailAddress"/>.</returns>
        </member>
        <member name="M:Vizistata.EmailAddress.TryParse(System.String,Vizistata.EmailAddress@)">
            <summary>
            Converts the String representation of an e-mail address to its <see cref="T:EmailAddress"/> equivalent.  A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">The String representation of an e-mail address to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:EmailAddress"/> that is equivalent to the value contained in <paramref name="s"/>, if the conversion succeeded, or a null reference if the conversion failed.  The conversion fails if the <paramref name="s"/> parameter is a null reference or is not an e-mail address in a valid format.  This parameter is passed uninitialized.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.EmailAddress.op_Equality(Vizistata.EmailAddress,Vizistata.EmailAddress)">
            <summary>
            Determines whether two instances of the <see cref="T:EmailAddress"/> class are equal.
            </summary>
            <param name="objA">The first <see cref="T:EmailAddress"/> to compare.</param>
            <param name="objB">The second <see cref="T:EmailAddress"/> to compare.</param>
            <returns><c>true</c> if <paramref name="objA"/> equals <paramref name="objB"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.EmailAddress.op_Inequality(Vizistata.EmailAddress,Vizistata.EmailAddress)">
            <summary>
            Determines whether two instances of the <see cref="T:EmailAddress"/> class are not equal.
            </summary>
            <param name="objA">The first <see cref="T:EmailAddress"/> to compare.</param>
            <param name="objB">The second <see cref="T:EmailAddress"/> to compare.</param>
            <returns><c>true</c> if <paramref name="objA"/> does not equal <paramref name="objB"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.EmailAddress.op_Implicit(Vizistata.EmailAddress)~System.String">
            <summary>
            Implicitly converts a <see cref="T:EmailAddress"/> value to a <see cref="T:String"/> value.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The <see cref="T:String"/> representation of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Vizistata.EmailAddress.op_Explicit(System.String)~Vizistata.EmailAddress">
            <summary>
            Explicitly converts a <see cref="T:String"/> value to a <see cref="T:EmailAddress"/> value.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The <see cref="T:EmailAddress"/> representation of <paramref name="value"/>.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/> cannot be converted to an <see cref="T:EmailAddress"/> object.</exception>
        </member>
        <member name="P:Vizistata.EmailAddress.Domain">
            <summary>
            Gets the domain part of the e-mail address (the part after the @ symbol).
            </summary>
        </member>
        <member name="P:Vizistata.EmailAddress.LocalPart">
            <summary>
            Gets the local part of the e-mail address (the part before the @ symbol).
            </summary>
        </member>
        <member name="T:Vizistata.Linq.NameValueCollectionExtensions">
            <summary>
            Provides extension methods for the <see cref="T:NameValueCollection"/> class.  This class may not be inherited.
            </summary>
        </member>
        <member name="M:Vizistata.Linq.NameValueCollectionExtensions.Get``1(System.Collections.Specialized.NameValueCollection,System.String,``0,Vizistata.Linq.NameValueCollectionExtensions.TryParse{``0})">
            <summary>
            Returns the named value specified.
            </summary>
            <typeparam name="T">The <see cref="T:Type"/> of value to return.</typeparam>
            <param name="collection">The collection from which to retrieve the value.</param>
            <param name="name">Specifies the value to retrieve.</param>
            <param name="defaultValue">The default value to use if the name specified is not in the collection of if the value does not represent a <see cref="T:Boolean"/> value.</param>
            <param name="tryParseMethod">Represents the parsing method to use.</param>
            <returns>The object representing the value specified by <paramref name="name"/>, or <paramref name="defaultValue"/> if the value is not present or the value does not represent an object of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Linq.NameValueCollectionExtensions.GetAndRemove(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Removes the value specified from the name value collection and returns the value.
            </summary>
            <param name="instance">The instance from which to retrieve and remove the value.</param>
            <param name="name">Specifies the value to retrieve and remove.</param>
            <returns>The value contained, or a null reference if the value did not exist in the collection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is a null reference.
            -or- <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Linq.NameValueCollectionExtensions.GetBoolean(System.Collections.Specialized.NameValueCollection,System.String,System.Boolean)">
            <summary>
            Returns the named value specified as a <see cref="T:Boolean"/> value.
            </summary>
            <param name="collection">The collection from which to retrieve the value.</param>
            <param name="name">Specifies the value to retrieve.</param>
            <param name="defaultValue">The default value to use if the name specified is not in the collection of if the value does not represent a <see cref="T:Boolean"/> value.</param>
            <returns>The <see cref="T:Boolean"/> value representing the value specified by <paramref name="name"/>, or <paramref name="defaultValue"/> if the value is not present or the value does not represent an object of type <see cref="T:Boolean"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Linq.NameValueCollectionExtensions.GetByte(System.Collections.Specialized.NameValueCollection,System.String,System.Byte)">
            <summary>
            Returns the named value specified as a <see cref="T:Byte"/> value.
            </summary>
            <param name="collection">The collection from which to retrieve the value.</param>
            <param name="name">Specifies the value to retrieve.</param>
            <param name="defaultValue">The default value to use if the name specified is not in the collection of if the value does not represent a <see cref="T:Byte"/> value.</param>
            <returns>The <see cref="T:Byte"/> value representing the value specified by <paramref name="name"/>, or <paramref name="defaultValue"/> if the value is not present or the value does not represent an object of type <see cref="T:Byte"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Linq.NameValueCollectionExtensions.GetChar(System.Collections.Specialized.NameValueCollection,System.String,System.Char)">
            <summary>
            Returns the named value specified as a <see cref="T:Char"/> value.
            </summary>
            <param name="collection">The collection from which to retrieve the value.</param>
            <param name="name">Specifies the value to retrieve.</param>
            <param name="defaultValue">The default value to use if the name specified is not in the collection of if the value does not represent a <see cref="T:Char"/> value.</param>
            <returns>The <see cref="T:Char"/> value representing the value specified by <paramref name="name"/>, or <paramref name="defaultValue"/> if the value is not present or the value does not represent an object of type <see cref="T:Char"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Linq.NameValueCollectionExtensions.GetDateTime(System.Collections.Specialized.NameValueCollection,System.String,System.DateTime)">
            <summary>
            Returns the named value specified as a <see cref="T:DateTime"/> value.
            </summary>
            <param name="collection">The collection from which to retrieve the value.</param>
            <param name="name">Specifies the value to retrieve.</param>
            <param name="defaultValue">The default value to use if the name specified is not in the collection of if the value does not represent a <see cref="T:DateTime"/> value.</param>
            <returns>The <see cref="T:DateTime"/> value representing the value specified by <paramref name="name"/>, or <paramref name="defaultValue"/> if the value is not present or the value does not represent an object of type <see cref="T:DateTime"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Linq.NameValueCollectionExtensions.GetDouble(System.Collections.Specialized.NameValueCollection,System.String,System.Double)">
            <summary>
            Returns the named value specified as a <see cref="T:Double"/> value.
            </summary>
            <param name="collection">The collection from which to retrieve the value.</param>
            <param name="name">Specifies the value to retrieve.</param>
            <param name="defaultValue">The default value to use if the name specified is not in the collection of if the value does not represent a <see cref="T:Double"/> value.</param>
            <returns>The <see cref="T:Double"/> value representing the value specified by <paramref name="name"/>, or <paramref name="defaultValue"/> if the value is not present or the value does not represent an object of type <see cref="T:Double"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Linq.NameValueCollectionExtensions.GetGuid(System.Collections.Specialized.NameValueCollection,System.String,System.Guid)">
            <summary>
            Returns the named value specified as a <see cref="T:Guid"/> value.
            </summary>
            <param name="collection">The collection from which to retrieve the value.</param>
            <param name="name">Specifies the value to retrieve.</param>
            <param name="defaultValue">The default value to use if the name specified is not in the collection of if the value does not represent a <see cref="T:Guid"/> value.</param>
            <returns>The <see cref="T:Guid"/> value representing the value specified by <paramref name="name"/>, or <paramref name="defaultValue"/> if the value is not present or the value does not represent an object of type <see cref="T:Guid"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Linq.NameValueCollectionExtensions.GetInt16(System.Collections.Specialized.NameValueCollection,System.String,System.Int16)">
            <summary>
            Returns the named value specified as a <see cref="T:Int16"/> value.
            </summary>
            <param name="collection">The collection from which to retrieve the value.</param>
            <param name="name">Specifies the value to retrieve.</param>
            <param name="defaultValue">The default value to use if the name specified is not in the collection of if the value does not represent a <see cref="T:Int16"/> value.</param>
            <returns>The <see cref="T:Int16"/> value representing the value specified by <paramref name="name"/>, or <paramref name="defaultValue"/> if the value is not present or the value does not represent an object of type <see cref="T:Int16"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Linq.NameValueCollectionExtensions.GetInt32(System.Collections.Specialized.NameValueCollection,System.String,System.Int32)">
            <summary>
            Returns the named value specified as a <see cref="T:Int32"/> value.
            </summary>
            <param name="collection">The collection from which to retrieve the value.</param>
            <param name="name">Specifies the value to retrieve.</param>
            <param name="defaultValue">The default value to use if the name specified is not in the collection of if the value does not represent a <see cref="T:Int32"/> value.</param>
            <returns>The <see cref="T:Int32"/> value representing the value specified by <paramref name="name"/>, or <paramref name="defaultValue"/> if the value is not present or the value does not represent an object of type <see cref="T:Int32"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Linq.NameValueCollectionExtensions.GetInt64(System.Collections.Specialized.NameValueCollection,System.String,System.Int64)">
            <summary>
            Returns the named value specified as a <see cref="T:Int64"/> value.
            </summary>
            <param name="collection">The collection from which to retrieve the value.</param>
            <param name="name">Specifies the value to retrieve.</param>
            <param name="defaultValue">The default value to use if the name specified is not in the collection of if the value does not represent a <see cref="T:Int64"/> value.</param>
            <returns>The <see cref="T:Int64"/> value representing the value specified by <paramref name="name"/>, or <paramref name="defaultValue"/> if the value is not present or the value does not represent an object of type <see cref="T:Int64"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Linq.NameValueCollectionExtensions.GetSByte(System.Collections.Specialized.NameValueCollection,System.String,System.SByte)">
            <summary>
            Returns the named value specified as a <see cref="T:SByte"/> value.
            </summary>
            <param name="collection">The collection from which to retrieve the value.</param>
            <param name="name">Specifies the value to retrieve.</param>
            <param name="defaultValue">The default value to use if the name specified is not in the collection of if the value does not represent a <see cref="T:SByte"/> value.</param>
            <returns>The <see cref="T:SByte"/> value representing the value specified by <paramref name="name"/>, or <paramref name="defaultValue"/> if the value is not present or the value does not represent an object of type <see cref="T:SByte"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Linq.NameValueCollectionExtensions.GetSingle(System.Collections.Specialized.NameValueCollection,System.String,System.Single)">
            <summary>
            Returns the named value specified as a <see cref="T:Single"/> value.
            </summary>
            <param name="collection">The collection from which to retrieve the value.</param>
            <param name="name">Specifies the value to retrieve.</param>
            <param name="defaultValue">The default value to use if the name specified is not in the collection of if the value does not represent a <see cref="T:Single"/> value.</param>
            <returns>The <see cref="T:Single"/> value representing the value specified by <paramref name="name"/>, or <paramref name="defaultValue"/> if the value is not present or the value does not represent an object of type <see cref="T:Single"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Linq.NameValueCollectionExtensions.GetUInt16(System.Collections.Specialized.NameValueCollection,System.String,System.UInt16)">
            <summary>
            Returns the named value specified as a <see cref="T:UInt16"/> value.
            </summary>
            <param name="collection">The collection from which to retrieve the value.</param>
            <param name="name">Specifies the value to retrieve.</param>
            <param name="defaultValue">The default value to use if the name specified is not in the collection of if the value does not represent a <see cref="T:UInt16"/> value.</param>
            <returns>The <see cref="T:UInt16"/> value representing the value specified by <paramref name="name"/>, or <paramref name="defaultValue"/> if the value is not present or the value does not represent an object of type <see cref="T:UInt16"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Linq.NameValueCollectionExtensions.GetUInt32(System.Collections.Specialized.NameValueCollection,System.String,System.UInt32)">
            <summary>
            Returns the named value specified as a <see cref="T:UInt32"/> value.
            </summary>
            <param name="collection">The collection from which to retrieve the value.</param>
            <param name="name">Specifies the value to retrieve.</param>
            <param name="defaultValue">The default value to use if the name specified is not in the collection of if the value does not represent a <see cref="T:UInt32"/> value.</param>
            <returns>The <see cref="T:UInt32"/> value representing the value specified by <paramref name="name"/>, or <paramref name="defaultValue"/> if the value is not present or the value does not represent an object of type <see cref="T:UInt32"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Linq.NameValueCollectionExtensions.GetUInt64(System.Collections.Specialized.NameValueCollection,System.String,System.UInt64)">
            <summary>
            Returns the named value specified as a <see cref="T:UInt64"/> value.
            </summary>
            <param name="collection">The collection from which to retrieve the value.</param>
            <param name="name">Specifies the value to retrieve.</param>
            <param name="defaultValue">The default value to use if the name specified is not in the collection of if the value does not represent a <see cref="T:UInt64"/> value.</param>
            <returns>The <see cref="T:UInt64"/> value representing the value specified by <paramref name="name"/>, or <paramref name="defaultValue"/> if the value is not present or the value does not represent an object of type <see cref="T:UInt64"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="name"/> is a null reference.</exception>
        </member>
        <member name="T:Vizistata.Linq.NameValueCollectionExtensions.TryParse`1">
            <summary>
            Represents one of the 'TryParse' methods.
            </summary>
            <typeparam name="T">The <see cref="T:Type"/> being returned.</typeparam>
            <param name="s">The value to parse.</param>
            <param name="result">The object that contains the value after parsing.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Vizistata.MimeTypes">
            <summary>
            Represents the various well-known Multipurpose Internet Mail Extensions (MIME) types.  This class may not be inherited.
            </summary>
        </member>
        <member name="F:Vizistata.MimeTypes.Html">
            <summary>
            Represents HTML text.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.MimeTypes.Plaintext">
            <summary>
            Represents plain text.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.MimeTypes.RichSiteSummary">
            <summary>
            Represents the Rich Site Summary (RSS) XML format.  This field is read-only.
            </summary>
        </member>
        <member name="T:Vizistata.ExceptionEventArgs">
            <summary>
            Provides context about an exception that occurs.  This class may not be inherited.
            </summary>
        </member>
        <member name="F:Vizistata.ExceptionEventArgs._bubbleException">
            <summary>
            <c>true</c> if the exeption should be bubbled up; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="F:Vizistata.ExceptionEventArgs._exception">
            <summary>
            The exception.
            </summary>
        </member>
        <member name="M:Vizistata.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ExceptionEventArgs"/> class.
            </summary>
            <param name="exception">The exception that occurred.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.ExceptionEventArgs.#ctor(System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ExceptionEventArgs"/> class.
            </summary>
            <param name="exception">The exception that occurred.</param>
            <param name="bubbleException"><c>true</c> if the default behavior is that the exception should be propagated; otherwise, <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> is a null reference.</exception>
        </member>
        <member name="P:Vizistata.ExceptionEventArgs.BubbleException">
            <summary>
            Gets or sets a value indicating whether or not the exception should be propagated.
            </summary>
        </member>
        <member name="P:Vizistata.ExceptionEventArgs.Exception">
            <summary>
            Gets the exception that occurred.
            </summary>
        </member>
        <member name="T:Vizistata.Data.DbCommandExtensions">
            <summary>
            Provides extension methods for the <see cref="T:DbCommand"/> class.  This class may not be inherited.
            </summary>
        </member>
        <member name="M:Vizistata.Data.DbCommandExtensions.AddParameterWithValue(System.Data.IDbCommand,System.String,System.Data.DbType,System.Object)">
            <summary>
            Adds a parameter to a command with the value specified.
            </summary>
            <param name="command">The command to which to add the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <param name="type">The type of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>The <see cref="T:DbParameter"/> object created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="type"/> is not defined by <see cref="T:DbType"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DbCommandExtensions.AddParameterWithValue(System.Data.IDbCommand,System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            Adds a parameter to a command with the value specified.
            </summary>
            <param name="command">The command to which to add the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <param name="type">The type of the parameter.</param>
            <param name="size">The size in bytes of the parameter's type.</param>
            <param name="value">The value of the parameter.</param>
            <returns>The <see cref="T:DbParameter"/> object created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="type"/> is not defined by <see cref="T:DbType"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DbCommandExtensions.AddParameterWithValue(System.Data.IDbCommand,System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            Adds a parameter to a command with the value specified.
            </summary>
            <param name="command">The command to which to add the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <param name="type">The type of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The <see cref="T:DbParameter"/> object created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="type"/> is not defined by <see cref="T:DbType"/>.
            -or- <paramref name="direction"/> is not defined by <see cref="T:ParameterDirection"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DbCommandExtensions.AddParameterWithValue(System.Data.IDbCommand,System.String,System.Data.DbType,System.Int32,System.Object,System.Data.ParameterDirection)">
            <summary>
            Adds a parameter to a command with the value specified.
            </summary>
            <param name="command">The command to which to add the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <param name="type">The type of the parameter.</param>
            <param name="size">The size in bytes of the parameter's type.</param>
            <param name="value">The value of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The <see cref="T:DbParameter"/> object created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="type"/> is not defined by <see cref="T:DbType"/>.
            -or- <paramref name="direction"/> is not defined by <see cref="T:ParameterDirection"/>.</exception>
        </member>
        <member name="M:Vizistata.Data.DbCommandExtensions.AddParameterWithValue(System.Data.IDbCommand,System.String,System.Data.DbType,System.Nullable{System.Int32},System.Object,System.Data.ParameterDirection)">
            <summary>
            Adds a parameter to a command with the value specified.
            </summary>
            <param name="command">The command to which to add the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <param name="type">The type of the parameter.</param>
            <param name="size">The size in bytes of the parameter's type, or a null reference if the size is not used in the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The <see cref="T:DbParameter"/> object created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="type"/> is not defined by <see cref="T:DbType"/>.
            -or- <paramref name="direction"/> is not defined by <see cref="T:ParameterDirection"/>.</exception>
        </member>
        <member name="T:Vizistata.Data.ColumnInfo">
            <summary>
            Provides information about a column.  This class may not be inherited.
            </summary>
        </member>
        <member name="F:Vizistata.Data.ColumnInfo._name">
            <summary>
            The name of the column.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Data.ColumnInfo._ordinal">
            <summary>
            The 0-based ordinal of the column.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Data.ColumnInfo._propertyDescriptor">
            <summary>
            The property descriptor for the column.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Data.ColumnInfo._type">
            <summary>
            The type of the column.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Data.ColumnInfo._typeName">
            <summary>
            The type name for the column.  This field is read-only.
            </summary>
        </member>
        <member name="M:Vizistata.Data.ColumnInfo.#ctor(System.Int32,System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ColumnInfo"/> class.
            </summary>
            <param name="ordinal">The 0-based ordinal of the column.</param>
            <param name="name">The name of the column.</param>
            <param name="type">The type of the column.</param>
            <param name="typeName">The type name for the column.</param>
        </member>
        <member name="P:Vizistata.Data.ColumnInfo.Name">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="P:Vizistata.Data.ColumnInfo.Ordinal">
            <summary>
            Gets the 0-based ordinal of the column.
            </summary>
        </member>
        <member name="P:Vizistata.Data.ColumnInfo.PropertyDescriptor">
            <summary>
            Gets the property descriptor for the column.
            </summary>
        </member>
        <member name="P:Vizistata.Data.ColumnInfo.Type">
            <summary>
            Gets the type of the column.
            </summary>
        </member>
        <member name="P:Vizistata.Data.ColumnInfo.TypeName">
            <summary>
            Gets the type name for the column.
            </summary>
        </member>
        <member name="T:Vizistata.Diagnostics.EmailTraceListener">
            <summary>
            A trace listener that sends e-mail messages with the contents of the messages.
            </summary>
        </member>
        <member name="F:Vizistata.Diagnostics.EmailTraceListener._currentLine">
            <summary>
            The current line that is being created, or a null reference.
            </summary>
        </member>
        <member name="F:Vizistata.Diagnostics.EmailTraceListener._linesDoor">
            <summary>
            Controls write access to the <see cref="F:_lines"/> field.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Diagnostics.EmailTraceListener._lines">
            <summary>
            The list of lines that have been created.  This field is read-only.
            </summary>
        </member>
        <member name="F:Vizistata.Diagnostics.EmailTraceListener._toAddresses">
            <summary>
            The e-mail addresses to whom the messages will be sent.
            </summary>
        </member>
        <member name="M:Vizistata.Diagnostics.EmailTraceListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EmailTraceListener"/> class.
            </summary>
        </member>
        <member name="M:Vizistata.Diagnostics.EmailTraceListener.#ctor(System.Net.Mail.MailAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:EmailTraceListener"/> class.
            </summary>
            <param name="toAddress">The recipient e-mail address.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="toAddress"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.EmailTraceListener.#ctor(System.Net.Mail.MailAddress,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EmailTraceListener"/> class.
            </summary>
            <param name="toAddress">The recipient e-mail address.</param>
            <param name="name">The name of the listener.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="toAddress"/> is a null reference.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.EmailTraceListener.#ctor(System.Net.Mail.MailAddressCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:EmailTraceListener"/> class.
            </summary>
            <param name="toAddresses">The list of recipient e-mail addresses.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="toAddresses"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="toAddresses"/> contains 0 elements.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.EmailTraceListener.#ctor(System.Net.Mail.MailAddressCollection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EmailTraceListener"/> class.
            </summary>
            <param name="toAddresses">The list of recipient e-mail addresses.</param>
            <param name="name">The name of the listener.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="toAddresses"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="toAddresses"/> contains 0 elements.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.EmailTraceListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EmailTraceListener"/> class.
            </summary>
            <param name="toAddresses">The list of recipient e-mail addresses separated by a comma character (',').</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="toAddresses"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="toAddresses"/> contains 0 characters.</exception>
            <exception cref="T:System.FormatException"><paramref name="toAddresses"/> contains an e-mail address that is invalid or not supported.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.EmailTraceListener.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EmailTraceListener"/> class.
            </summary>
            <param name="toAddresses">The list of recipient e-mail addresses separated by a comma character (',').</param>
            <param name="name">The name of the listener.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="toAddresses"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="toAddresses"/> contains 0 characters.</exception>
            <exception cref="T:System.FormatException"><paramref name="toAddresses"/> contains an e-mail address that is invalid or not supported.</exception>
        </member>
        <member name="M:Vizistata.Diagnostics.EmailTraceListener.CreateMailBody">
            <summary>
            Creates the e-mail body.
            </summary>
            <returns>The value that represents the body of the e-mail.</returns>
        </member>
        <member name="M:Vizistata.Diagnostics.EmailTraceListener.CreateMailSubject">
            <summary>
            Creates the e-mail subject line.
            </summary>
            <returns>The value that represents the subject line of the e-mail.</returns>
        </member>
        <member name="M:Vizistata.Diagnostics.EmailTraceListener.Flush">
            <summary>
            Immediately sends any lines to the e-mail addresses in the recipient list.
            </summary>
        </member>
        <member name="M:Vizistata.Diagnostics.EmailTraceListener.SendMailMessage">
            <summary>
            Attempts to send an e-mail message based on the information in this instance and returns a value indicating if a mail message was created and sent.
            </summary>
            <returns><c>true</c> if a mail message was created and sent; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vizistata.Diagnostics.EmailTraceListener.Write(System.String,System.Boolean)">
            <summary>
            Writes a message.  A parameter determines whether the line is complete after the message is written.
            </summary>
            <param name="message">The message to write.</param>
            <param name="endOfLine"><c>true</c> if this message is the end of the current line; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Vizistata.Diagnostics.EmailTraceListener.Write(System.String)">
            <summary>
            Writes a message.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Vizistata.Diagnostics.EmailTraceListener.WriteLine(System.String)">
            <summary>
            Writes a message and ends with a new-line character.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="P:Vizistata.Diagnostics.EmailTraceListener.Lines">
            <summary>
            Gets the enumerable collection of lines that have not yet been sent.
            </summary>
        </member>
    </members>
</doc>
